"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tw-elements";
exports.ids = ["vendor-chunks/tw-elements"];
exports.modules = {

/***/ "(rsc)/./node_modules/tw-elements/js/tw-elements.es.min.js":
/*!***********************************************************!*\
  !*** ./node_modules/tw-elements/js/tw-elements.es.min.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Button: () => (/* binding */ qs),\n/* harmony export */   Carousel: () => (/* binding */ Z),\n/* harmony export */   Collapse: () => (/* binding */ pe),\n/* harmony export */   Dropdown: () => (/* binding */ X),\n/* harmony export */   Input: () => (/* binding */ $),\n/* harmony export */   Modal: () => (/* binding */ ai),\n/* harmony export */   Offcanvas: () => (/* binding */ _e),\n/* harmony export */   Popover: () => (/* binding */ Nn),\n/* harmony export */   Ripple: () => (/* binding */ Hn),\n/* harmony export */   ScrollSpy: () => (/* binding */ In),\n/* harmony export */   Tab: () => (/* binding */ Rn),\n/* harmony export */   Tooltip: () => (/* binding */ Qt),\n/* harmony export */   initTWE: () => (/* binding */ lc)\n/* harmony export */ });\nvar Yn = Object.defineProperty;\nvar Kn = (i, t, e)=>t in i ? Yn(i, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : i[t] = e;\nvar Ne = (i, t, e)=>(Kn(i, typeof t != \"symbol\" ? t + \"\" : t, e), e);\n/*!\n* TW Elements\n* Version: FREE 2.0.0\n* \n* Copyright: Material Design for Bootstrap\n* https://mdbootstrap.com/\n* \n* Read the license: https://tw-elements.com/license/\n*\n*\n* Documentation: https://tw-elements.com/\n*\n* Support: https://mdbootstrap.com/support/cat/twe\n*\n* Contact: tailwind@mdbootstrap.com\n* \n*/ const Se = (()=>{\n    const i = {};\n    let t = 1;\n    return {\n        set (e, s, n) {\n            typeof e[s] > \"u\" && (e[s] = {\n                key: s,\n                id: t\n            }, t++), i[e[s].id] = n;\n        },\n        get (e, s) {\n            if (!e || typeof e[s] > \"u\") return null;\n            const n = e[s];\n            return n.key === s ? i[n.id] : null;\n        },\n        delete (e, s) {\n            if (typeof e[s] > \"u\") return;\n            const n = e[s];\n            n.key === s && (delete i[n.id], delete e[s]);\n        }\n    };\n})(), V = {\n    setData (i, t, e) {\n        Se.set(i, t, e);\n    },\n    getData (i, t) {\n        return Se.get(i, t);\n    },\n    removeData (i, t) {\n        Se.delete(i, t);\n    }\n}, zn = 1e6, qn = 1e3, Ze = \"transitionend\", Xn = (i)=>i == null ? `${i}` : ({}).toString.call(i).match(/\\s([a-z]+)/i)[1].toLowerCase(), Gn = (i)=>{\n    do i += Math.floor(Math.random() * zn);\n    while (document.getElementById(i));\n    return i;\n}, ks = (i)=>{\n    let t = i.getAttribute(\"data-twe-target\");\n    if (!t || t === \"#\") {\n        let e = i.getAttribute(\"href\");\n        if (!e || !e.includes(\"#\") && !e.startsWith(\".\")) return null;\n        e.includes(\"#\") && !e.startsWith(\"#\") && (e = `#${e.split(\"#\")[1]}`), t = e && e !== \"#\" ? e.trim() : null;\n    }\n    return t;\n}, ci = (i)=>{\n    const t = ks(i);\n    return t && document.querySelector(t) ? t : null;\n}, nt = (i)=>{\n    const t = ks(i);\n    return t ? document.querySelector(t) : null;\n}, Je = (i)=>{\n    if (!i) return 0;\n    let { transitionDuration: t, transitionDelay: e } = window.getComputedStyle(i);\n    const s = Number.parseFloat(t), n = Number.parseFloat(e);\n    return !s && !n ? 0 : (t = t.split(\",\")[0], e = e.split(\",\")[0], (Number.parseFloat(t) + Number.parseFloat(e)) * qn);\n}, Ps = (i)=>{\n    i.dispatchEvent(new Event(Ze));\n}, St = (i)=>!i || typeof i != \"object\" ? !1 : (typeof i.jquery < \"u\" && (i = i[0]), typeof i.nodeType < \"u\"), rt = (i)=>St(i) ? i.jquery ? i[0] : i : typeof i == \"string\" && i.length > 0 ? document.querySelector(i) : null, R = (i, t, e)=>{\n    Object.keys(e).forEach((s)=>{\n        const n = e[s], r = t[s], o = r && St(r) ? \"element\" : Xn(r);\n        if (!new RegExp(n).test(o)) throw new Error(`${i.toUpperCase()}: Option \"${s}\" provided type \"${o}\" but expected type \"${n}\".`);\n    });\n}, kt = (i)=>{\n    if (!i) return !1;\n    if (i.style && i.parentNode && i.parentNode.style) {\n        const t = getComputedStyle(i), e = getComputedStyle(i.parentNode);\n        return t.display !== \"none\" && e.display !== \"none\" && t.visibility !== \"hidden\";\n    }\n    return !1;\n}, gt = (i)=>!i || i.nodeType !== Node.ELEMENT_NODE || i.classList.contains(\"disabled\") ? !0 : typeof i.disabled < \"u\" ? i.disabled : i.hasAttribute(\"disabled\") && i.getAttribute(\"disabled\") !== \"false\", Ms = (i)=>{\n    if (!document.documentElement.attachShadow) return null;\n    if (typeof i.getRootNode == \"function\") {\n        const t = i.getRootNode();\n        return t instanceof ShadowRoot ? t : null;\n    }\n    return i instanceof ShadowRoot ? i : i.parentNode ? Ms(i.parentNode) : null;\n}, me = ()=>function() {}, Xt = (i)=>{\n    i.offsetHeight;\n}, Hs = ()=>{\n    const { jQuery: i } = window;\n    return i && !document.body.hasAttribute(\"data-twe-no-jquery\") ? i : null;\n}, Le = [], Vs = (i)=>{\n    document.readyState === \"loading\" ? (Le.length || document.addEventListener(\"DOMContentLoaded\", ()=>{\n        Le.forEach((t)=>t());\n    }), Le.push(i)) : i();\n}, M = ()=>document.documentElement.dir === \"rtl\", Ft = (i)=>document.createElement(i), _t = (i)=>{\n    typeof i == \"function\" && i();\n}, Ws = (i, t, e = !0)=>{\n    if (!e) {\n        _t(i);\n        return;\n    }\n    const s = 5, n = Je(t) + s;\n    let r = !1;\n    const o = ({ target: a })=>{\n        a === t && (r = !0, t.removeEventListener(Ze, o), _t(i));\n    };\n    t.addEventListener(Ze, o), setTimeout(()=>{\n        r || Ps(t);\n    }, n);\n}, Bs = (i, t, e, s)=>{\n    let n = i.indexOf(t);\n    if (n === -1) return i[!e && s ? i.length - 1 : 0];\n    const r = i.length;\n    return n += e ? 1 : -1, s && (n = (n + r) % r), i[Math.max(0, Math.min(n, r - 1))];\n}, Qn = /[^.]*(?=\\..*)\\.|.*/, Zn = /\\..*/, Jn = /::\\d+$/, $e = {};\nlet ki = 1;\nconst tr = {\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\"\n}, er = /^(mouseenter|mouseleave)/i, js = /* @__PURE__ */ new Set([\n    \"click\",\n    \"dblclick\",\n    \"mouseup\",\n    \"mousedown\",\n    \"contextmenu\",\n    \"mousewheel\",\n    \"DOMMouseScroll\",\n    \"mouseover\",\n    \"mouseout\",\n    \"mousemove\",\n    \"selectstart\",\n    \"selectend\",\n    \"keydown\",\n    \"keypress\",\n    \"keyup\",\n    \"orientationchange\",\n    \"touchstart\",\n    \"touchmove\",\n    \"touchend\",\n    \"touchcancel\",\n    \"pointerdown\",\n    \"pointermove\",\n    \"pointerup\",\n    \"pointerleave\",\n    \"pointercancel\",\n    \"gesturestart\",\n    \"gesturechange\",\n    \"gestureend\",\n    \"focus\",\n    \"blur\",\n    \"change\",\n    \"reset\",\n    \"select\",\n    \"submit\",\n    \"focusin\",\n    \"focusout\",\n    \"load\",\n    \"unload\",\n    \"beforeunload\",\n    \"resize\",\n    \"move\",\n    \"DOMContentLoaded\",\n    \"readystatechange\",\n    \"error\",\n    \"abort\",\n    \"scroll\"\n]);\nfunction Us(i, t) {\n    return t && `${t}::${ki++}` || i.uidEvent || ki++;\n}\nfunction Fs(i) {\n    const t = Us(i);\n    return i.uidEvent = t, $e[t] = $e[t] || {}, $e[t];\n}\nfunction ir(i, t) {\n    return function e(s) {\n        return s.delegateTarget = i, e.oneOff && d.off(i, s.type, t), t.apply(i, [\n            s\n        ]);\n    };\n}\nfunction sr(i, t, e) {\n    return function s(n) {\n        const r = i.querySelectorAll(t);\n        for(let { target: o } = n; o && o !== this; o = o.parentNode)for(let a = r.length; a--; \"\")if (r[a] === o) return n.delegateTarget = o, s.oneOff && d.off(i, n.type, e), e.apply(o, [\n            n\n        ]);\n        return null;\n    };\n}\nfunction Ys(i, t, e = null) {\n    const s = Object.keys(i);\n    for(let n = 0, r = s.length; n < r; n++){\n        const o = i[s[n]];\n        if (o.originalHandler === t && o.delegationSelector === e) return o;\n    }\n    return null;\n}\nfunction Ks(i, t, e) {\n    const s = typeof t == \"string\", n = s ? e : t;\n    let r = zs(i);\n    return js.has(r) || (r = i), [\n        s,\n        n,\n        r\n    ];\n}\nfunction Pi(i, t, e, s, n) {\n    if (typeof t != \"string\" || !i) return;\n    if (e || (e = s, s = null), er.test(t)) {\n        const g = (O)=>function(T) {\n                if (!T.relatedTarget || T.relatedTarget !== T.delegateTarget && !T.delegateTarget.contains(T.relatedTarget)) return O.call(this, T);\n            };\n        s ? s = g(s) : e = g(e);\n    }\n    const [r, o, a] = Ks(t, e, s), l = Fs(i), u = l[a] || (l[a] = {}), c = Ys(u, o, r ? e : null);\n    if (c) {\n        c.oneOff = c.oneOff && n;\n        return;\n    }\n    const f = Us(o, t.replace(Qn, \"\")), v = r ? sr(i, e, s) : ir(i, e);\n    v.delegationSelector = r ? e : null, v.originalHandler = o, v.oneOff = n, v.uidEvent = f, u[f] = v, i.addEventListener(a, v, r);\n}\nfunction ti(i, t, e, s, n) {\n    const r = Ys(t[e], s, n);\n    r && (i.removeEventListener(e, r, !!n), delete t[e][r.uidEvent]);\n}\nfunction nr(i, t, e, s) {\n    const n = t[e] || {};\n    Object.keys(n).forEach((r)=>{\n        if (r.includes(s)) {\n            const o = n[r];\n            ti(i, t, e, o.originalHandler, o.delegationSelector);\n        }\n    });\n}\nfunction zs(i) {\n    return i = i.replace(Zn, \"\"), tr[i] || i;\n}\nconst d = {\n    on (i, t, e, s) {\n        Pi(i, t, e, s, !1);\n    },\n    one (i, t, e, s) {\n        Pi(i, t, e, s, !0);\n    },\n    off (i, t, e, s) {\n        if (typeof t != \"string\" || !i) return;\n        const [n, r, o] = Ks(t, e, s), a = o !== t, l = Fs(i), u = t.startsWith(\".\");\n        if (typeof r < \"u\") {\n            if (!l || !l[o]) return;\n            ti(i, l, o, r, n ? e : null);\n            return;\n        }\n        u && Object.keys(l).forEach((f)=>{\n            nr(i, l, f, t.slice(1));\n        });\n        const c = l[o] || {};\n        Object.keys(c).forEach((f)=>{\n            const v = f.replace(Jn, \"\");\n            if (!a || t.includes(v)) {\n                const g = c[f];\n                ti(i, l, o, g.originalHandler, g.delegationSelector);\n            }\n        });\n    },\n    trigger (i, t, e) {\n        if (typeof t != \"string\" || !i) return null;\n        const s = Hs(), n = zs(t), r = t !== n, o = js.has(n);\n        let a, l = !0, u = !0, c = !1, f = null;\n        return r && s && (a = s.Event(t, e), s(i).trigger(a), l = !a.isPropagationStopped(), u = !a.isImmediatePropagationStopped(), c = a.isDefaultPrevented()), o ? (f = document.createEvent(\"HTMLEvents\"), f.initEvent(n, l, !0)) : f = new CustomEvent(t, {\n            bubbles: l,\n            cancelable: !0\n        }), typeof e < \"u\" && Object.keys(e).forEach((v)=>{\n            Object.defineProperty(f, v, {\n                get () {\n                    return e[v];\n                }\n            });\n        }), c && f.preventDefault(), u && i.dispatchEvent(f), f.defaultPrevented && typeof a < \"u\" && a.preventDefault(), f;\n    }\n}, rr = \"5.1.3\";\nclass tt {\n    constructor(t){\n        t = rt(t), t && (this._element = t, V.setData(this._element, this.constructor.DATA_KEY, this));\n    }\n    dispose() {\n        V.removeData(this._element, this.constructor.DATA_KEY), d.off(this._element, this.constructor.EVENT_KEY), Object.getOwnPropertyNames(this).forEach((t)=>{\n            this[t] = null;\n        });\n    }\n    _queueCallback(t, e, s = !0) {\n        Ws(t, e, s);\n    }\n    /** Static */ static getInstance(t) {\n        return V.getData(rt(t), this.DATA_KEY);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n    static get VERSION() {\n        return rr;\n    }\n    static get NAME() {\n        throw new Error('You have to implement the static method \"NAME\", for each component!');\n    }\n    static get DATA_KEY() {\n        return `twe.${this.NAME}`;\n    }\n    static get EVENT_KEY() {\n        return `.${this.DATA_KEY}`;\n    }\n}\nconst or = \"button\", ar = \"active\";\nclass qs extends tt {\n    // Getters\n    static get NAME() {\n        return or;\n    }\n    // Public\n    toggle() {\n        this._element.setAttribute(\"aria-pressed\", this._element.classList.toggle(ar));\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = qs.getOrCreateInstance(this);\n            t === \"toggle\" && e[t]();\n        });\n    }\n}\nvar k = \"top\", W = \"bottom\", B = \"right\", P = \"left\", ve = \"auto\", Pt = [\n    k,\n    W,\n    B,\n    P\n], Et = \"start\", Lt = \"end\", Xs = \"clippingParents\", di = \"viewport\", Ct = \"popper\", Gs = \"reference\", ei = /* @__PURE__ */ Pt.reduce(function(i, t) {\n    return i.concat([\n        t + \"-\" + Et,\n        t + \"-\" + Lt\n    ]);\n}, []), ui = /* @__PURE__ */ [].concat(Pt, [\n    ve\n]).reduce(function(i, t) {\n    return i.concat([\n        t,\n        t + \"-\" + Et,\n        t + \"-\" + Lt\n    ]);\n}, []), Qs = \"beforeRead\", Zs = \"read\", Js = \"afterRead\", tn = \"beforeMain\", en = \"main\", sn = \"afterMain\", nn = \"beforeWrite\", rn = \"write\", on = \"afterWrite\", an = [\n    Qs,\n    Zs,\n    Js,\n    tn,\n    en,\n    sn,\n    nn,\n    rn,\n    on\n];\nfunction Q(i) {\n    return i ? (i.nodeName || \"\").toLowerCase() : null;\n}\nfunction j(i) {\n    if (i == null) return window;\n    if (i.toString() !== \"[object Window]\") {\n        var t = i.ownerDocument;\n        return t && t.defaultView || window;\n    }\n    return i;\n}\nfunction vt(i) {\n    var t = j(i).Element;\n    return i instanceof t || i instanceof Element;\n}\nfunction F(i) {\n    var t = j(i).HTMLElement;\n    return i instanceof t || i instanceof HTMLElement;\n}\nfunction hi(i) {\n    if (typeof ShadowRoot > \"u\") return !1;\n    var t = j(i).ShadowRoot;\n    return i instanceof t || i instanceof ShadowRoot;\n}\nfunction lr(i) {\n    var t = i.state;\n    Object.keys(t.elements).forEach(function(e) {\n        var s = t.styles[e] || {}, n = t.attributes[e] || {}, r = t.elements[e];\n        !F(r) || !Q(r) || (Object.assign(r.style, s), Object.keys(n).forEach(function(o) {\n            var a = n[o];\n            a === !1 ? r.removeAttribute(o) : r.setAttribute(o, a === !0 ? \"\" : a);\n        }));\n    });\n}\nfunction cr(i) {\n    var t = i.state, e = {\n        popper: {\n            position: t.options.strategy,\n            left: \"0\",\n            top: \"0\",\n            margin: \"0\"\n        },\n        arrow: {\n            position: \"absolute\"\n        },\n        reference: {}\n    };\n    return Object.assign(t.elements.popper.style, e.popper), t.styles = e, t.elements.arrow && Object.assign(t.elements.arrow.style, e.arrow), function() {\n        Object.keys(t.elements).forEach(function(s) {\n            var n = t.elements[s], r = t.attributes[s] || {}, o = Object.keys(t.styles.hasOwnProperty(s) ? t.styles[s] : e[s]), a = o.reduce(function(l, u) {\n                return l[u] = \"\", l;\n            }, {});\n            !F(n) || !Q(n) || (Object.assign(n.style, a), Object.keys(r).forEach(function(l) {\n                n.removeAttribute(l);\n            }));\n        });\n    };\n}\nconst fi = {\n    name: \"applyStyles\",\n    enabled: !0,\n    phase: \"write\",\n    fn: lr,\n    effect: cr,\n    requires: [\n        \"computeStyles\"\n    ]\n};\nfunction G(i) {\n    return i.split(\"-\")[0];\n}\nvar mt = Math.max, Ee = Math.min, $t = Math.round;\nfunction ii() {\n    var i = navigator.userAgentData;\n    return i != null && i.brands && Array.isArray(i.brands) ? i.brands.map(function(t) {\n        return t.brand + \"/\" + t.version;\n    }).join(\" \") : navigator.userAgent;\n}\nfunction ln() {\n    return !/^((?!chrome|android).)*safari/i.test(ii());\n}\nfunction It(i, t, e) {\n    t === void 0 && (t = !1), e === void 0 && (e = !1);\n    var s = i.getBoundingClientRect(), n = 1, r = 1;\n    t && F(i) && (n = i.offsetWidth > 0 && $t(s.width) / i.offsetWidth || 1, r = i.offsetHeight > 0 && $t(s.height) / i.offsetHeight || 1);\n    var o = vt(i) ? j(i) : window, a = o.visualViewport, l = !ln() && e, u = (s.left + (l && a ? a.offsetLeft : 0)) / n, c = (s.top + (l && a ? a.offsetTop : 0)) / r, f = s.width / n, v = s.height / r;\n    return {\n        width: f,\n        height: v,\n        top: c,\n        right: u + f,\n        bottom: c + v,\n        left: u,\n        x: u,\n        y: c\n    };\n}\nfunction pi(i) {\n    var t = It(i), e = i.offsetWidth, s = i.offsetHeight;\n    return Math.abs(t.width - e) <= 1 && (e = t.width), Math.abs(t.height - s) <= 1 && (s = t.height), {\n        x: i.offsetLeft,\n        y: i.offsetTop,\n        width: e,\n        height: s\n    };\n}\nfunction cn(i, t) {\n    var e = t.getRootNode && t.getRootNode();\n    if (i.contains(t)) return !0;\n    if (e && hi(e)) {\n        var s = t;\n        do {\n            if (s && i.isSameNode(s)) return !0;\n            s = s.parentNode || s.host;\n        }while (s);\n    }\n    return !1;\n}\nfunction J(i) {\n    return j(i).getComputedStyle(i);\n}\nfunction dr(i) {\n    return [\n        \"table\",\n        \"td\",\n        \"th\"\n    ].indexOf(Q(i)) >= 0;\n}\nfunction ot(i) {\n    return ((vt(i) ? i.ownerDocument : // $FlowFixMe[prop-missing]\n    i.document) || window.document).documentElement;\n}\nfunction be(i) {\n    return Q(i) === \"html\" ? i : // this is a quicker (but less type safe) way to save quite some bytes from the bundle\n    // $FlowFixMe[incompatible-return]\n    // $FlowFixMe[prop-missing]\n    i.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n    i.parentNode || // DOM Element detected\n    (hi(i) ? i.host : null) || // ShadowRoot detected\n    // $FlowFixMe[incompatible-call]: HTMLElement is a Node\n    ot(i);\n}\nfunction Mi(i) {\n    return !F(i) || // https://github.com/popperjs/popper-core/issues/837\n    J(i).position === \"fixed\" ? null : i.offsetParent;\n}\nfunction ur(i) {\n    var t = /firefox/i.test(ii()), e = /Trident/i.test(ii());\n    if (e && F(i)) {\n        var s = J(i);\n        if (s.position === \"fixed\") return null;\n    }\n    var n = be(i);\n    for(hi(n) && (n = n.host); F(n) && [\n        \"html\",\n        \"body\"\n    ].indexOf(Q(n)) < 0;){\n        var r = J(n);\n        if (r.transform !== \"none\" || r.perspective !== \"none\" || r.contain === \"paint\" || [\n            \"transform\",\n            \"perspective\"\n        ].indexOf(r.willChange) !== -1 || t && r.willChange === \"filter\" || t && r.filter && r.filter !== \"none\") return n;\n        n = n.parentNode;\n    }\n    return null;\n}\nfunction Gt(i) {\n    for(var t = j(i), e = Mi(i); e && dr(e) && J(e).position === \"static\";)e = Mi(e);\n    return e && (Q(e) === \"html\" || Q(e) === \"body\" && J(e).position === \"static\") ? t : e || ur(i) || t;\n}\nfunction _i(i) {\n    return [\n        \"top\",\n        \"bottom\"\n    ].indexOf(i) >= 0 ? \"x\" : \"y\";\n}\nfunction zt(i, t, e) {\n    return mt(i, Ee(t, e));\n}\nfunction hr(i, t, e) {\n    var s = zt(i, t, e);\n    return s > e ? e : s;\n}\nfunction dn() {\n    return {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n    };\n}\nfunction un(i) {\n    return Object.assign({}, dn(), i);\n}\nfunction hn(i, t) {\n    return t.reduce(function(e, s) {\n        return e[s] = i, e;\n    }, {});\n}\nvar fr = function(t, e) {\n    return t = typeof t == \"function\" ? t(Object.assign({}, e.rects, {\n        placement: e.placement\n    })) : t, un(typeof t != \"number\" ? t : hn(t, Pt));\n};\nfunction pr(i) {\n    var t, e = i.state, s = i.name, n = i.options, r = e.elements.arrow, o = e.modifiersData.popperOffsets, a = G(e.placement), l = _i(a), u = [\n        P,\n        B\n    ].indexOf(a) >= 0, c = u ? \"height\" : \"width\";\n    if (!(!r || !o)) {\n        var f = fr(n.padding, e), v = pi(r), g = l === \"y\" ? k : P, O = l === \"y\" ? W : B, T = e.rects.reference[c] + e.rects.reference[l] - o[l] - e.rects.popper[c], A = o[l] - e.rects.reference[l], D = Gt(r), L = D ? l === \"y\" ? D.clientHeight || 0 : D.clientWidth || 0 : 0, m = T / 2 - A / 2, p = f[g], _ = L - v[c] - f[O], b = L / 2 - v[c] / 2 + m, w = zt(p, b, _), C = l;\n        e.modifiersData[s] = (t = {}, t[C] = w, t.centerOffset = w - b, t);\n    }\n}\nfunction _r(i) {\n    var t = i.state, e = i.options, s = e.element, n = s === void 0 ? \"[data-popper-arrow]\" : s;\n    n != null && (typeof n == \"string\" && (n = t.elements.popper.querySelector(n), !n) || cn(t.elements.popper, n) && (t.elements.arrow = n));\n}\nconst fn = {\n    name: \"arrow\",\n    enabled: !0,\n    phase: \"main\",\n    fn: pr,\n    effect: _r,\n    requires: [\n        \"popperOffsets\"\n    ],\n    requiresIfExists: [\n        \"preventOverflow\"\n    ]\n};\nfunction Rt(i) {\n    return i.split(\"-\")[1];\n}\nvar gr = {\n    top: \"auto\",\n    right: \"auto\",\n    bottom: \"auto\",\n    left: \"auto\"\n};\nfunction mr(i, t) {\n    var e = i.x, s = i.y, n = t.devicePixelRatio || 1;\n    return {\n        x: $t(e * n) / n || 0,\n        y: $t(s * n) / n || 0\n    };\n}\nfunction Hi(i) {\n    var t, e = i.popper, s = i.popperRect, n = i.placement, r = i.variation, o = i.offsets, a = i.position, l = i.gpuAcceleration, u = i.adaptive, c = i.roundOffsets, f = i.isFixed, v = o.x, g = v === void 0 ? 0 : v, O = o.y, T = O === void 0 ? 0 : O, A = typeof c == \"function\" ? c({\n        x: g,\n        y: T\n    }) : {\n        x: g,\n        y: T\n    };\n    g = A.x, T = A.y;\n    var D = o.hasOwnProperty(\"x\"), L = o.hasOwnProperty(\"y\"), m = P, p = k, _ = window;\n    if (u) {\n        var b = Gt(e), w = \"clientHeight\", C = \"clientWidth\";\n        if (b === j(e) && (b = ot(e), J(b).position !== \"static\" && a === \"absolute\" && (w = \"scrollHeight\", C = \"scrollWidth\")), b = b, n === k || (n === P || n === B) && r === Lt) {\n            p = W;\n            var y = f && b === _ && _.visualViewport ? _.visualViewport.height : // $FlowFixMe[prop-missing]\n            b[w];\n            T -= y - s.height, T *= l ? 1 : -1;\n        }\n        if (n === P || (n === k || n === W) && r === Lt) {\n            m = B;\n            var N = f && b === _ && _.visualViewport ? _.visualViewport.width : // $FlowFixMe[prop-missing]\n            b[C];\n            g -= N - s.width, g *= l ? 1 : -1;\n        }\n    }\n    var S = Object.assign({\n        position: a\n    }, u && gr), x = c === !0 ? mr({\n        x: g,\n        y: T\n    }, j(e)) : {\n        x: g,\n        y: T\n    };\n    if (g = x.x, T = x.y, l) {\n        var I;\n        return Object.assign({}, S, (I = {}, I[p] = L ? \"0\" : \"\", I[m] = D ? \"0\" : \"\", I.transform = (_.devicePixelRatio || 1) <= 1 ? \"translate(\" + g + \"px, \" + T + \"px)\" : \"translate3d(\" + g + \"px, \" + T + \"px, 0)\", I));\n    }\n    return Object.assign({}, S, (t = {}, t[p] = L ? T + \"px\" : \"\", t[m] = D ? g + \"px\" : \"\", t.transform = \"\", t));\n}\nfunction Er(i) {\n    var t = i.state, e = i.options, s = e.gpuAcceleration, n = s === void 0 ? !0 : s, r = e.adaptive, o = r === void 0 ? !0 : r, a = e.roundOffsets, l = a === void 0 ? !0 : a, u = {\n        placement: G(t.placement),\n        variation: Rt(t.placement),\n        popper: t.elements.popper,\n        popperRect: t.rects.popper,\n        gpuAcceleration: n,\n        isFixed: t.options.strategy === \"fixed\"\n    };\n    t.modifiersData.popperOffsets != null && (t.styles.popper = Object.assign({}, t.styles.popper, Hi(Object.assign({}, u, {\n        offsets: t.modifiersData.popperOffsets,\n        position: t.options.strategy,\n        adaptive: o,\n        roundOffsets: l\n    })))), t.modifiersData.arrow != null && (t.styles.arrow = Object.assign({}, t.styles.arrow, Hi(Object.assign({}, u, {\n        offsets: t.modifiersData.arrow,\n        position: \"absolute\",\n        adaptive: !1,\n        roundOffsets: l\n    })))), t.attributes.popper = Object.assign({}, t.attributes.popper, {\n        \"data-popper-placement\": t.placement\n    });\n}\nconst gi = {\n    name: \"computeStyles\",\n    enabled: !0,\n    phase: \"beforeWrite\",\n    fn: Er,\n    data: {}\n};\nvar se = {\n    passive: !0\n};\nfunction vr(i) {\n    var t = i.state, e = i.instance, s = i.options, n = s.scroll, r = n === void 0 ? !0 : n, o = s.resize, a = o === void 0 ? !0 : o, l = j(t.elements.popper), u = [].concat(t.scrollParents.reference, t.scrollParents.popper);\n    return r && u.forEach(function(c) {\n        c.addEventListener(\"scroll\", e.update, se);\n    }), a && l.addEventListener(\"resize\", e.update, se), function() {\n        r && u.forEach(function(c) {\n            c.removeEventListener(\"scroll\", e.update, se);\n        }), a && l.removeEventListener(\"resize\", e.update, se);\n    };\n}\nconst mi = {\n    name: \"eventListeners\",\n    enabled: !0,\n    phase: \"write\",\n    fn: function() {},\n    effect: vr,\n    data: {}\n};\nvar br = {\n    left: \"right\",\n    right: \"left\",\n    bottom: \"top\",\n    top: \"bottom\"\n};\nfunction ue(i) {\n    return i.replace(/left|right|bottom|top/g, function(t) {\n        return br[t];\n    });\n}\nvar wr = {\n    start: \"end\",\n    end: \"start\"\n};\nfunction Vi(i) {\n    return i.replace(/start|end/g, function(t) {\n        return wr[t];\n    });\n}\nfunction Ei(i) {\n    var t = j(i), e = t.pageXOffset, s = t.pageYOffset;\n    return {\n        scrollLeft: e,\n        scrollTop: s\n    };\n}\nfunction vi(i) {\n    return It(ot(i)).left + Ei(i).scrollLeft;\n}\nfunction Tr(i, t) {\n    var e = j(i), s = ot(i), n = e.visualViewport, r = s.clientWidth, o = s.clientHeight, a = 0, l = 0;\n    if (n) {\n        r = n.width, o = n.height;\n        var u = ln();\n        (u || !u && t === \"fixed\") && (a = n.offsetLeft, l = n.offsetTop);\n    }\n    return {\n        width: r,\n        height: o,\n        x: a + vi(i),\n        y: l\n    };\n}\nfunction yr(i) {\n    var t, e = ot(i), s = Ei(i), n = (t = i.ownerDocument) == null ? void 0 : t.body, r = mt(e.scrollWidth, e.clientWidth, n ? n.scrollWidth : 0, n ? n.clientWidth : 0), o = mt(e.scrollHeight, e.clientHeight, n ? n.scrollHeight : 0, n ? n.clientHeight : 0), a = -s.scrollLeft + vi(i), l = -s.scrollTop;\n    return J(n || e).direction === \"rtl\" && (a += mt(e.clientWidth, n ? n.clientWidth : 0) - r), {\n        width: r,\n        height: o,\n        x: a,\n        y: l\n    };\n}\nfunction bi(i) {\n    var t = J(i), e = t.overflow, s = t.overflowX, n = t.overflowY;\n    return /auto|scroll|overlay|hidden/.test(e + n + s);\n}\nfunction pn(i) {\n    return [\n        \"html\",\n        \"body\",\n        \"#document\"\n    ].indexOf(Q(i)) >= 0 ? i.ownerDocument.body : F(i) && bi(i) ? i : pn(be(i));\n}\nfunction qt(i, t) {\n    var e;\n    t === void 0 && (t = []);\n    var s = pn(i), n = s === ((e = i.ownerDocument) == null ? void 0 : e.body), r = j(s), o = n ? [\n        r\n    ].concat(r.visualViewport || [], bi(s) ? s : []) : s, a = t.concat(o);\n    return n ? a : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here\n    a.concat(qt(be(o)));\n}\nfunction si(i) {\n    return Object.assign({}, i, {\n        left: i.x,\n        top: i.y,\n        right: i.x + i.width,\n        bottom: i.y + i.height\n    });\n}\nfunction Ar(i, t) {\n    var e = It(i, !1, t === \"fixed\");\n    return e.top = e.top + i.clientTop, e.left = e.left + i.clientLeft, e.bottom = e.top + i.clientHeight, e.right = e.left + i.clientWidth, e.width = i.clientWidth, e.height = i.clientHeight, e.x = e.left, e.y = e.top, e;\n}\nfunction Wi(i, t, e) {\n    return t === di ? si(Tr(i, e)) : vt(t) ? Ar(t, e) : si(yr(ot(i)));\n}\nfunction Cr(i) {\n    var t = qt(be(i)), e = [\n        \"absolute\",\n        \"fixed\"\n    ].indexOf(J(i).position) >= 0, s = e && F(i) ? Gt(i) : i;\n    return vt(s) ? t.filter(function(n) {\n        return vt(n) && cn(n, s) && Q(n) !== \"body\";\n    }) : [];\n}\nfunction Or(i, t, e, s) {\n    var n = t === \"clippingParents\" ? Cr(i) : [].concat(t), r = [].concat(n, [\n        e\n    ]), o = r[0], a = r.reduce(function(l, u) {\n        var c = Wi(i, u, s);\n        return l.top = mt(c.top, l.top), l.right = Ee(c.right, l.right), l.bottom = Ee(c.bottom, l.bottom), l.left = mt(c.left, l.left), l;\n    }, Wi(i, o, s));\n    return a.width = a.right - a.left, a.height = a.bottom - a.top, a.x = a.left, a.y = a.top, a;\n}\nfunction _n(i) {\n    var t = i.reference, e = i.element, s = i.placement, n = s ? G(s) : null, r = s ? Rt(s) : null, o = t.x + t.width / 2 - e.width / 2, a = t.y + t.height / 2 - e.height / 2, l;\n    switch(n){\n        case k:\n            l = {\n                x: o,\n                y: t.y - e.height\n            };\n            break;\n        case W:\n            l = {\n                x: o,\n                y: t.y + t.height\n            };\n            break;\n        case B:\n            l = {\n                x: t.x + t.width,\n                y: a\n            };\n            break;\n        case P:\n            l = {\n                x: t.x - e.width,\n                y: a\n            };\n            break;\n        default:\n            l = {\n                x: t.x,\n                y: t.y\n            };\n    }\n    var u = n ? _i(n) : null;\n    if (u != null) {\n        var c = u === \"y\" ? \"height\" : \"width\";\n        switch(r){\n            case Et:\n                l[u] = l[u] - (t[c] / 2 - e[c] / 2);\n                break;\n            case Lt:\n                l[u] = l[u] + (t[c] / 2 - e[c] / 2);\n                break;\n        }\n    }\n    return l;\n}\nfunction xt(i, t) {\n    t === void 0 && (t = {});\n    var e = t, s = e.placement, n = s === void 0 ? i.placement : s, r = e.strategy, o = r === void 0 ? i.strategy : r, a = e.boundary, l = a === void 0 ? Xs : a, u = e.rootBoundary, c = u === void 0 ? di : u, f = e.elementContext, v = f === void 0 ? Ct : f, g = e.altBoundary, O = g === void 0 ? !1 : g, T = e.padding, A = T === void 0 ? 0 : T, D = un(typeof A != \"number\" ? A : hn(A, Pt)), L = v === Ct ? Gs : Ct, m = i.rects.popper, p = i.elements[O ? L : v], _ = Or(vt(p) ? p : p.contextElement || ot(i.elements.popper), l, c, o), b = It(i.elements.reference), w = _n({\n        reference: b,\n        element: m,\n        strategy: \"absolute\",\n        placement: n\n    }), C = si(Object.assign({}, m, w)), y = v === Ct ? C : b, N = {\n        top: _.top - y.top + D.top,\n        bottom: y.bottom - _.bottom + D.bottom,\n        left: _.left - y.left + D.left,\n        right: y.right - _.right + D.right\n    }, S = i.modifiersData.offset;\n    if (v === Ct && S) {\n        var x = S[n];\n        Object.keys(N).forEach(function(I) {\n            var at = [\n                B,\n                W\n            ].indexOf(I) >= 0 ? 1 : -1, lt = [\n                k,\n                W\n            ].indexOf(I) >= 0 ? \"y\" : \"x\";\n            N[I] += x[lt] * at;\n        });\n    }\n    return N;\n}\nfunction Dr(i, t) {\n    t === void 0 && (t = {});\n    var e = t, s = e.placement, n = e.boundary, r = e.rootBoundary, o = e.padding, a = e.flipVariations, l = e.allowedAutoPlacements, u = l === void 0 ? ui : l, c = Rt(s), f = c ? a ? ei : ei.filter(function(O) {\n        return Rt(O) === c;\n    }) : Pt, v = f.filter(function(O) {\n        return u.indexOf(O) >= 0;\n    });\n    v.length === 0 && (v = f);\n    var g = v.reduce(function(O, T) {\n        return O[T] = xt(i, {\n            placement: T,\n            boundary: n,\n            rootBoundary: r,\n            padding: o\n        })[G(T)], O;\n    }, {});\n    return Object.keys(g).sort(function(O, T) {\n        return g[O] - g[T];\n    });\n}\nfunction Nr(i) {\n    if (G(i) === ve) return [];\n    var t = ue(i);\n    return [\n        Vi(i),\n        t,\n        Vi(t)\n    ];\n}\nfunction Sr(i) {\n    var t = i.state, e = i.options, s = i.name;\n    if (!t.modifiersData[s]._skip) {\n        for(var n = e.mainAxis, r = n === void 0 ? !0 : n, o = e.altAxis, a = o === void 0 ? !0 : o, l = e.fallbackPlacements, u = e.padding, c = e.boundary, f = e.rootBoundary, v = e.altBoundary, g = e.flipVariations, O = g === void 0 ? !0 : g, T = e.allowedAutoPlacements, A = t.options.placement, D = G(A), L = D === A, m = l || (L || !O ? [\n            ue(A)\n        ] : Nr(A)), p = [\n            A\n        ].concat(m).reduce(function(wt, et) {\n            return wt.concat(G(et) === ve ? Dr(t, {\n                placement: et,\n                boundary: c,\n                rootBoundary: f,\n                padding: u,\n                flipVariations: O,\n                allowedAutoPlacements: T\n            }) : et);\n        }, []), _ = t.rects.reference, b = t.rects.popper, w = /* @__PURE__ */ new Map(), C = !0, y = p[0], N = 0; N < p.length; N++){\n            var S = p[N], x = G(S), I = Rt(S) === Et, at = [\n                k,\n                W\n            ].indexOf(x) >= 0, lt = at ? \"width\" : \"height\", H = xt(t, {\n                placement: S,\n                boundary: c,\n                rootBoundary: f,\n                altBoundary: v,\n                padding: u\n            }), Y = at ? I ? B : P : I ? W : k;\n            _[lt] > b[lt] && (Y = ue(Y));\n            var Zt = ue(Y), ct = [];\n            if (r && ct.push(H[x] <= 0), a && ct.push(H[Y] <= 0, H[Zt] <= 0), ct.every(function(wt) {\n                return wt;\n            })) {\n                y = S, C = !1;\n                break;\n            }\n            w.set(S, ct);\n        }\n        if (C) for(var Jt = O ? 3 : 1, Ae = function(et) {\n            var Vt = p.find(function(ee) {\n                var dt = w.get(ee);\n                if (dt) return dt.slice(0, et).every(function(Ce) {\n                    return Ce;\n                });\n            });\n            if (Vt) return y = Vt, \"break\";\n        }, Ht = Jt; Ht > 0; Ht--){\n            var te = Ae(Ht);\n            if (te === \"break\") break;\n        }\n        t.placement !== y && (t.modifiersData[s]._skip = !0, t.placement = y, t.reset = !0);\n    }\n}\nconst gn = {\n    name: \"flip\",\n    enabled: !0,\n    phase: \"main\",\n    fn: Sr,\n    requiresIfExists: [\n        \"offset\"\n    ],\n    data: {\n        _skip: !1\n    }\n};\nfunction Bi(i, t, e) {\n    return e === void 0 && (e = {\n        x: 0,\n        y: 0\n    }), {\n        top: i.top - t.height - e.y,\n        right: i.right - t.width + e.x,\n        bottom: i.bottom - t.height + e.y,\n        left: i.left - t.width - e.x\n    };\n}\nfunction ji(i) {\n    return [\n        k,\n        B,\n        W,\n        P\n    ].some(function(t) {\n        return i[t] >= 0;\n    });\n}\nfunction Lr(i) {\n    var t = i.state, e = i.name, s = t.rects.reference, n = t.rects.popper, r = t.modifiersData.preventOverflow, o = xt(t, {\n        elementContext: \"reference\"\n    }), a = xt(t, {\n        altBoundary: !0\n    }), l = Bi(o, s), u = Bi(a, n, r), c = ji(l), f = ji(u);\n    t.modifiersData[e] = {\n        referenceClippingOffsets: l,\n        popperEscapeOffsets: u,\n        isReferenceHidden: c,\n        hasPopperEscaped: f\n    }, t.attributes.popper = Object.assign({}, t.attributes.popper, {\n        \"data-popper-reference-hidden\": c,\n        \"data-popper-escaped\": f\n    });\n}\nconst mn = {\n    name: \"hide\",\n    enabled: !0,\n    phase: \"main\",\n    requiresIfExists: [\n        \"preventOverflow\"\n    ],\n    fn: Lr\n};\nfunction $r(i, t, e) {\n    var s = G(i), n = [\n        P,\n        k\n    ].indexOf(s) >= 0 ? -1 : 1, r = typeof e == \"function\" ? e(Object.assign({}, t, {\n        placement: i\n    })) : e, o = r[0], a = r[1];\n    return o = o || 0, a = (a || 0) * n, [\n        P,\n        B\n    ].indexOf(s) >= 0 ? {\n        x: a,\n        y: o\n    } : {\n        x: o,\n        y: a\n    };\n}\nfunction Ir(i) {\n    var t = i.state, e = i.options, s = i.name, n = e.offset, r = n === void 0 ? [\n        0,\n        0\n    ] : n, o = ui.reduce(function(c, f) {\n        return c[f] = $r(f, t.rects, r), c;\n    }, {}), a = o[t.placement], l = a.x, u = a.y;\n    t.modifiersData.popperOffsets != null && (t.modifiersData.popperOffsets.x += l, t.modifiersData.popperOffsets.y += u), t.modifiersData[s] = o;\n}\nconst En = {\n    name: \"offset\",\n    enabled: !0,\n    phase: \"main\",\n    requires: [\n        \"popperOffsets\"\n    ],\n    fn: Ir\n};\nfunction Rr(i) {\n    var t = i.state, e = i.name;\n    t.modifiersData[e] = _n({\n        reference: t.rects.reference,\n        element: t.rects.popper,\n        strategy: \"absolute\",\n        placement: t.placement\n    });\n}\nconst wi = {\n    name: \"popperOffsets\",\n    enabled: !0,\n    phase: \"read\",\n    fn: Rr,\n    data: {}\n};\nfunction xr(i) {\n    return i === \"x\" ? \"y\" : \"x\";\n}\nfunction kr(i) {\n    var t = i.state, e = i.options, s = i.name, n = e.mainAxis, r = n === void 0 ? !0 : n, o = e.altAxis, a = o === void 0 ? !1 : o, l = e.boundary, u = e.rootBoundary, c = e.altBoundary, f = e.padding, v = e.tether, g = v === void 0 ? !0 : v, O = e.tetherOffset, T = O === void 0 ? 0 : O, A = xt(t, {\n        boundary: l,\n        rootBoundary: u,\n        padding: f,\n        altBoundary: c\n    }), D = G(t.placement), L = Rt(t.placement), m = !L, p = _i(D), _ = xr(p), b = t.modifiersData.popperOffsets, w = t.rects.reference, C = t.rects.popper, y = typeof T == \"function\" ? T(Object.assign({}, t.rects, {\n        placement: t.placement\n    })) : T, N = typeof y == \"number\" ? {\n        mainAxis: y,\n        altAxis: y\n    } : Object.assign({\n        mainAxis: 0,\n        altAxis: 0\n    }, y), S = t.modifiersData.offset ? t.modifiersData.offset[t.placement] : null, x = {\n        x: 0,\n        y: 0\n    };\n    if (b) {\n        if (r) {\n            var I, at = p === \"y\" ? k : P, lt = p === \"y\" ? W : B, H = p === \"y\" ? \"height\" : \"width\", Y = b[p], Zt = Y + A[at], ct = Y - A[lt], Jt = g ? -C[H] / 2 : 0, Ae = L === Et ? w[H] : C[H], Ht = L === Et ? -C[H] : -w[H], te = t.elements.arrow, wt = g && te ? pi(te) : {\n                width: 0,\n                height: 0\n            }, et = t.modifiersData[\"arrow#persistent\"] ? t.modifiersData[\"arrow#persistent\"].padding : dn(), Vt = et[at], ee = et[lt], dt = zt(0, w[H], wt[H]), Ce = m ? w[H] / 2 - Jt - dt - Vt - N.mainAxis : Ae - dt - Vt - N.mainAxis, Vn = m ? -w[H] / 2 + Jt + dt + ee + N.mainAxis : Ht + dt + ee + N.mainAxis, Oe = t.elements.arrow && Gt(t.elements.arrow), Wn = Oe ? p === \"y\" ? Oe.clientTop || 0 : Oe.clientLeft || 0 : 0, Oi = (I = S == null ? void 0 : S[p]) != null ? I : 0, Bn = Y + Ce - Oi - Wn, jn = Y + Vn - Oi, Di = zt(g ? Ee(Zt, Bn) : Zt, Y, g ? mt(ct, jn) : ct);\n            b[p] = Di, x[p] = Di - Y;\n        }\n        if (a) {\n            var Ni, Un = p === \"x\" ? k : P, Fn = p === \"x\" ? W : B, ut = b[_], ie = _ === \"y\" ? \"height\" : \"width\", Si = ut + A[Un], Li = ut - A[Fn], De = [\n                k,\n                P\n            ].indexOf(D) !== -1, $i = (Ni = S == null ? void 0 : S[_]) != null ? Ni : 0, Ii = De ? Si : ut - w[ie] - C[ie] - $i + N.altAxis, Ri = De ? ut + w[ie] + C[ie] - $i - N.altAxis : Li, xi = g && De ? hr(Ii, ut, Ri) : zt(g ? Ii : Si, ut, g ? Ri : Li);\n            b[_] = xi, x[_] = xi - ut;\n        }\n        t.modifiersData[s] = x;\n    }\n}\nconst vn = {\n    name: \"preventOverflow\",\n    enabled: !0,\n    phase: \"main\",\n    fn: kr,\n    requiresIfExists: [\n        \"offset\"\n    ]\n};\nfunction Pr(i) {\n    return {\n        scrollLeft: i.scrollLeft,\n        scrollTop: i.scrollTop\n    };\n}\nfunction Mr(i) {\n    return i === j(i) || !F(i) ? Ei(i) : Pr(i);\n}\nfunction Hr(i) {\n    var t = i.getBoundingClientRect(), e = $t(t.width) / i.offsetWidth || 1, s = $t(t.height) / i.offsetHeight || 1;\n    return e !== 1 || s !== 1;\n}\nfunction Vr(i, t, e) {\n    e === void 0 && (e = !1);\n    var s = F(t), n = F(t) && Hr(t), r = ot(t), o = It(i, n, e), a = {\n        scrollLeft: 0,\n        scrollTop: 0\n    }, l = {\n        x: 0,\n        y: 0\n    };\n    return (s || !s && !e) && ((Q(t) !== \"body\" || // https://github.com/popperjs/popper-core/issues/1078\n    bi(r)) && (a = Mr(t)), F(t) ? (l = It(t, !0), l.x += t.clientLeft, l.y += t.clientTop) : r && (l.x = vi(r))), {\n        x: o.left + a.scrollLeft - l.x,\n        y: o.top + a.scrollTop - l.y,\n        width: o.width,\n        height: o.height\n    };\n}\nfunction Wr(i) {\n    var t = /* @__PURE__ */ new Map(), e = /* @__PURE__ */ new Set(), s = [];\n    i.forEach(function(r) {\n        t.set(r.name, r);\n    });\n    function n(r) {\n        e.add(r.name);\n        var o = [].concat(r.requires || [], r.requiresIfExists || []);\n        o.forEach(function(a) {\n            if (!e.has(a)) {\n                var l = t.get(a);\n                l && n(l);\n            }\n        }), s.push(r);\n    }\n    return i.forEach(function(r) {\n        e.has(r.name) || n(r);\n    }), s;\n}\nfunction Br(i) {\n    var t = Wr(i);\n    return an.reduce(function(e, s) {\n        return e.concat(t.filter(function(n) {\n            return n.phase === s;\n        }));\n    }, []);\n}\nfunction jr(i) {\n    var t;\n    return function() {\n        return t || (t = new Promise(function(e) {\n            Promise.resolve().then(function() {\n                t = void 0, e(i());\n            });\n        })), t;\n    };\n}\nfunction Ur(i) {\n    var t = i.reduce(function(e, s) {\n        var n = e[s.name];\n        return e[s.name] = n ? Object.assign({}, n, s, {\n            options: Object.assign({}, n.options, s.options),\n            data: Object.assign({}, n.data, s.data)\n        }) : s, e;\n    }, {});\n    return Object.keys(t).map(function(e) {\n        return t[e];\n    });\n}\nvar Ui = {\n    placement: \"bottom\",\n    modifiers: [],\n    strategy: \"absolute\"\n};\nfunction Fi() {\n    for(var i = arguments.length, t = new Array(i), e = 0; e < i; e++)t[e] = arguments[e];\n    return !t.some(function(s) {\n        return !(s && typeof s.getBoundingClientRect == \"function\");\n    });\n}\nfunction we(i) {\n    i === void 0 && (i = {});\n    var t = i, e = t.defaultModifiers, s = e === void 0 ? [] : e, n = t.defaultOptions, r = n === void 0 ? Ui : n;\n    return function(a, l, u) {\n        u === void 0 && (u = r);\n        var c = {\n            placement: \"bottom\",\n            orderedModifiers: [],\n            options: Object.assign({}, Ui, r),\n            modifiersData: {},\n            elements: {\n                reference: a,\n                popper: l\n            },\n            attributes: {},\n            styles: {}\n        }, f = [], v = !1, g = {\n            state: c,\n            setOptions: function(D) {\n                var L = typeof D == \"function\" ? D(c.options) : D;\n                T(), c.options = Object.assign({}, r, c.options, L), c.scrollParents = {\n                    reference: vt(a) ? qt(a) : a.contextElement ? qt(a.contextElement) : [],\n                    popper: qt(l)\n                };\n                var m = Br(Ur([].concat(s, c.options.modifiers)));\n                return c.orderedModifiers = m.filter(function(p) {\n                    return p.enabled;\n                }), O(), g.update();\n            },\n            // Sync update – it will always be executed, even if not necessary. This\n            // is useful for low frequency updates where sync behavior simplifies the\n            // logic.\n            // For high frequency updates (e.g. `resize` and `scroll` events), always\n            // prefer the async Popper#update method\n            forceUpdate: function() {\n                if (!v) {\n                    var D = c.elements, L = D.reference, m = D.popper;\n                    if (Fi(L, m)) {\n                        c.rects = {\n                            reference: Vr(L, Gt(m), c.options.strategy === \"fixed\"),\n                            popper: pi(m)\n                        }, c.reset = !1, c.placement = c.options.placement, c.orderedModifiers.forEach(function(N) {\n                            return c.modifiersData[N.name] = Object.assign({}, N.data);\n                        });\n                        for(var p = 0; p < c.orderedModifiers.length; p++){\n                            if (c.reset === !0) {\n                                c.reset = !1, p = -1;\n                                continue;\n                            }\n                            var _ = c.orderedModifiers[p], b = _.fn, w = _.options, C = w === void 0 ? {} : w, y = _.name;\n                            typeof b == \"function\" && (c = b({\n                                state: c,\n                                options: C,\n                                name: y,\n                                instance: g\n                            }) || c);\n                        }\n                    }\n                }\n            },\n            // Async and optimistically optimized update – it will not be executed if\n            // not necessary (debounced to run at most once-per-tick)\n            update: jr(function() {\n                return new Promise(function(A) {\n                    g.forceUpdate(), A(c);\n                });\n            }),\n            destroy: function() {\n                T(), v = !0;\n            }\n        };\n        if (!Fi(a, l)) return g;\n        g.setOptions(u).then(function(A) {\n            !v && u.onFirstUpdate && u.onFirstUpdate(A);\n        });\n        function O() {\n            c.orderedModifiers.forEach(function(A) {\n                var D = A.name, L = A.options, m = L === void 0 ? {} : L, p = A.effect;\n                if (typeof p == \"function\") {\n                    var _ = p({\n                        state: c,\n                        name: D,\n                        instance: g,\n                        options: m\n                    }), b = function() {};\n                    f.push(_ || b);\n                }\n            });\n        }\n        function T() {\n            f.forEach(function(A) {\n                return A();\n            }), f = [];\n        }\n        return g;\n    };\n}\nvar Fr = /* @__PURE__ */ we(), Yr = [\n    mi,\n    wi,\n    gi,\n    fi\n], Kr = /* @__PURE__ */ we({\n    defaultModifiers: Yr\n}), zr = [\n    mi,\n    wi,\n    gi,\n    fi,\n    En,\n    gn,\n    vn,\n    fn,\n    mn\n], Ti = /* @__PURE__ */ we({\n    defaultModifiers: zr\n});\nconst bn = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n    __proto__: null,\n    afterMain: sn,\n    afterRead: Js,\n    afterWrite: on,\n    applyStyles: fi,\n    arrow: fn,\n    auto: ve,\n    basePlacements: Pt,\n    beforeMain: tn,\n    beforeRead: Qs,\n    beforeWrite: nn,\n    bottom: W,\n    clippingParents: Xs,\n    computeStyles: gi,\n    createPopper: Ti,\n    createPopperBase: Fr,\n    createPopperLite: Kr,\n    detectOverflow: xt,\n    end: Lt,\n    eventListeners: mi,\n    flip: gn,\n    hide: mn,\n    left: P,\n    main: en,\n    modifierPhases: an,\n    offset: En,\n    placements: ui,\n    popper: Ct,\n    popperGenerator: we,\n    popperOffsets: wi,\n    preventOverflow: vn,\n    read: Zs,\n    reference: Gs,\n    right: B,\n    start: Et,\n    top: k,\n    variationPlacements: ei,\n    viewport: di,\n    write: rn\n}, Symbol.toStringTag, {\n    value: \"Module\"\n}));\nfunction Ie(i) {\n    return i === \"true\" ? !0 : i === \"false\" ? !1 : i === Number(i).toString() ? Number(i) : i === \"\" || i === \"null\" ? null : i;\n}\nfunction Re(i) {\n    return i.replace(/[A-Z]/g, (t)=>`-${t.toLowerCase()}`);\n}\nconst E = {\n    setDataAttribute (i, t, e) {\n        i.setAttribute(`data-twe-${Re(t)}`, e);\n    },\n    removeDataAttribute (i, t) {\n        i.removeAttribute(`data-twe-${Re(t)}`);\n    },\n    getDataAttributes (i) {\n        if (!i) return {};\n        const t = {};\n        return Object.keys(i.dataset).filter((e)=>e.startsWith(\"twe\")).forEach((e)=>{\n            if (e.startsWith(\"tweClass\")) return;\n            let s = e.replace(/^twe/, \"\");\n            s = s.charAt(0).toLowerCase() + s.slice(1, s.length), t[s] = Ie(i.dataset[e]);\n        }), t;\n    },\n    getDataClassAttributes (i) {\n        if (!i) return {};\n        const t = {\n            ...i.dataset\n        };\n        return Object.keys(t).filter((e)=>e.startsWith(\"tweClass\")).forEach((e)=>{\n            let s = e.replace(/^tweClass/, \"\");\n            s = s.charAt(0).toLowerCase() + s.slice(1, s.length), t[s] = Ie(t[e]);\n        }), t;\n    },\n    getDataAttribute (i, t) {\n        return Ie(i.getAttribute(`data-twe-${Re(t)}`));\n    },\n    offset (i) {\n        const t = i.getBoundingClientRect();\n        return {\n            top: t.top + document.body.scrollTop,\n            left: t.left + document.body.scrollLeft\n        };\n    },\n    position (i) {\n        return {\n            top: i.offsetTop,\n            left: i.offsetLeft\n        };\n    },\n    style (i, t) {\n        Object.assign(i.style, t);\n    },\n    toggleClass (i, t) {\n        i && xe(t).forEach((e)=>{\n            i.classList.contains(e) ? i.classList.remove(e) : i.classList.add(e);\n        });\n    },\n    addClass (i, t) {\n        xe(t).forEach((e)=>!i.classList.contains(e) && i.classList.add(e));\n    },\n    addStyle (i, t) {\n        Object.keys(t).forEach((e)=>{\n            i.style[e] = t[e];\n        });\n    },\n    removeClass (i, t) {\n        xe(t).forEach((e)=>i.classList.contains(e) && i.classList.remove(e));\n    },\n    hasClass (i, t) {\n        return i.classList.contains(t);\n    },\n    maxOffset (i) {\n        const t = i.getBoundingClientRect();\n        return {\n            top: t.top + Math.max(document.body.scrollTop, document.documentElement.scrollTop, window.scrollY),\n            left: t.left + Math.max(document.body.scrollLeft, document.documentElement.scrollLeft, window.scrollX)\n        };\n    }\n};\nfunction xe(i) {\n    return typeof i == \"string\" ? i.split(\" \") : Array.isArray(i) ? i : !1;\n}\nconst qr = 3, h = {\n    closest (i, t) {\n        return i.closest(t);\n    },\n    matches (i, t) {\n        return i.matches(t);\n    },\n    find (i, t = document.documentElement) {\n        return [].concat(...Element.prototype.querySelectorAll.call(t, i));\n    },\n    findOne (i, t = document.documentElement) {\n        return Element.prototype.querySelector.call(t, i);\n    },\n    children (i, t) {\n        return [].concat(...i.children).filter((s)=>s.matches(t));\n    },\n    parents (i, t) {\n        const e = [];\n        let s = i.parentNode;\n        for(; s && s.nodeType === Node.ELEMENT_NODE && s.nodeType !== qr;)this.matches(s, t) && e.push(s), s = s.parentNode;\n        return e;\n    },\n    prev (i, t) {\n        let e = i.previousElementSibling;\n        for(; e;){\n            if (e.matches(t)) return [\n                e\n            ];\n            e = e.previousElementSibling;\n        }\n        return [];\n    },\n    next (i, t) {\n        let e = i.nextElementSibling;\n        for(; e;){\n            if (this.matches(e, t)) return [\n                e\n            ];\n            e = e.nextElementSibling;\n        }\n        return [];\n    },\n    focusableChildren (i) {\n        const t = [\n            \"a\",\n            \"button\",\n            \"input\",\n            \"textarea\",\n            \"select\",\n            \"details\",\n            \"[tabindex]\",\n            '[contenteditable=\"true\"]'\n        ].map((e)=>`${e}:not([tabindex^=\"-\"])`).join(\", \");\n        return this.find(t, i).filter((e)=>!gt(e) && kt(e));\n    }\n}, ke = \"dropdown\", Xr = \"twe.dropdown\", bt = `.${Xr}`, yi = \".data-api\", he = \"Escape\", Yi = \"Space\", Ki = \"Tab\", ni = \"ArrowUp\", fe = \"ArrowDown\", Gr = 2, Qr = new RegExp(`${ni}|${fe}|${he}`), Zr = `hide${bt}`, Jr = `hidden${bt}`, to = `show${bt}`, eo = `shown${bt}`, io = `click${bt}${yi}`, zi = `keydown${bt}${yi}`, so = `keyup${bt}${yi}`, it = \"show\", no = \"dropup\", ro = \"dropend\", oo = \"dropstart\", ao = \"[data-twe-navbar-ref]\", ne = \"[data-twe-dropdown-toggle-ref]\", Pe = \"[data-twe-dropdown-menu-ref]\", lo = \"[data-twe-navbar-nav-ref]\", co = \"[data-twe-dropdown-menu-ref] [data-twe-dropdown-item-ref]:not(.disabled):not(:disabled)\", uo = M() ? \"top-end\" : \"top-start\", ho = M() ? \"top-start\" : \"top-end\", fo = M() ? \"bottom-end\" : \"bottom-start\", po = M() ? \"bottom-start\" : \"bottom-end\", _o = M() ? \"left-start\" : \"right-start\", go = M() ? \"right-start\" : \"left-start\", mo = [\n    {\n        opacity: \"0\"\n    },\n    {\n        opacity: \"1\"\n    }\n], Eo = [\n    {\n        opacity: \"1\"\n    },\n    {\n        opacity: \"0\"\n    }\n], qi = {\n    iterations: 1,\n    easing: \"ease\",\n    fill: \"both\"\n}, vo = {\n    offset: [\n        0,\n        2\n    ],\n    boundary: \"clippingParents\",\n    reference: \"toggle\",\n    display: \"dynamic\",\n    popperConfig: null,\n    autoClose: !0,\n    dropdownAnimation: \"on\",\n    animationDuration: 550\n}, bo = {\n    offset: \"(array|string|function)\",\n    boundary: \"(string|element)\",\n    reference: \"(string|element|object)\",\n    display: \"string\",\n    popperConfig: \"(null|object|function)\",\n    autoClose: \"(boolean|string)\",\n    dropdownAnimation: \"string\",\n    animationDuration: \"number\"\n};\nclass X extends tt {\n    constructor(t, e){\n        super(t), this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._fadeOutAnimate = null;\n        const s = window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches;\n        this._animationCanPlay = this._config.dropdownAnimation === \"on\" && !s, this._didInit = !1, this._init();\n    }\n    // Getters\n    static get Default() {\n        return vo;\n    }\n    static get DefaultType() {\n        return bo;\n    }\n    static get NAME() {\n        return ke;\n    }\n    // Public\n    toggle() {\n        return this._isShown() ? this.hide() : this.show();\n    }\n    show() {\n        if (gt(this._element) || this._isShown(this._menu)) return;\n        const t = {\n            relatedTarget: this._element\n        };\n        if (d.trigger(this._element, to, t).defaultPrevented) return;\n        const s = X.getParentFromElement(this._element);\n        this._inNavbar ? E.setDataAttribute(this._menu, \"popper\", \"none\") : this._createPopper(s), \"ontouchstart\" in document.documentElement && !s.closest(lo) && [].concat(...document.body.children).forEach((n)=>d.on(n, \"mouseover\", me)), this._element.focus(), this._element.setAttribute(\"aria-expanded\", !0), this._menu.setAttribute(`data-twe-dropdown-${it}`, \"\"), this._animationCanPlay && this._menu.animate(mo, {\n            ...qi,\n            duration: this._config.animationDuration\n        }), this._element.setAttribute(`data-twe-dropdown-${it}`, \"\"), setTimeout(()=>{\n            d.trigger(this._element, eo, t);\n        }, this._animationCanPlay ? this._config.animationDuration : 0);\n    }\n    hide() {\n        if (gt(this._element) || !this._isShown(this._menu)) return;\n        const t = {\n            relatedTarget: this._element\n        };\n        this._completeHide(t);\n    }\n    dispose() {\n        this._popper && this._popper.destroy(), super.dispose();\n    }\n    update() {\n        this._inNavbar = this._detectNavbar(), this._popper && this._popper.update();\n    }\n    // Private\n    _init() {\n        this._didInit || (d.on(document, zi, ne, X.dataApiKeydownHandler), d.on(document, zi, Pe, X.dataApiKeydownHandler), d.on(document, io, X.clearMenus), d.on(document, so, X.clearMenus), this._didInit = !0);\n    }\n    _completeHide(t) {\n        this._fadeOutAnimate && this._fadeOutAnimate.playState === \"running\" || d.trigger(this._element, Zr, t).defaultPrevented || (\"ontouchstart\" in document.documentElement && [].concat(...document.body.children).forEach((s)=>d.off(s, \"mouseover\", me)), this._animationCanPlay && (this._fadeOutAnimate = this._menu.animate(Eo, {\n            ...qi,\n            duration: this._config.animationDuration\n        })), setTimeout(()=>{\n            this._popper && this._popper.destroy(), this._menu.removeAttribute(`data-twe-dropdown-${it}`), this._element.removeAttribute(`data-twe-dropdown-${it}`), this._element.setAttribute(\"aria-expanded\", \"false\"), E.removeDataAttribute(this._menu, \"popper\"), d.trigger(this._element, Jr, t);\n        }, this._animationCanPlay ? this._config.animationDuration : 0));\n    }\n    _getConfig(t) {\n        if (t = {\n            ...this.constructor.Default,\n            ...E.getDataAttributes(this._element),\n            ...t\n        }, R(ke, t, this.constructor.DefaultType), typeof t.reference == \"object\" && !St(t.reference) && typeof t.reference.getBoundingClientRect != \"function\") throw new TypeError(`${ke.toUpperCase()}: Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method.`);\n        return t;\n    }\n    _createPopper(t) {\n        if (typeof bn > \"u\") throw new TypeError(\"Bootstrap's dropdowns require Popper (https://popper.js.org)\");\n        let e = this._element;\n        this._config.reference === \"parent\" ? e = t : St(this._config.reference) ? e = rt(this._config.reference) : typeof this._config.reference == \"object\" && (e = this._config.reference);\n        const s = this._getPopperConfig(), n = s.modifiers.find((r)=>r.name === \"applyStyles\" && r.enabled === !1);\n        this._popper = Ti(e, this._menu, s), n && E.setDataAttribute(this._menu, \"popper\", \"static\");\n    }\n    _isShown(t = this._element) {\n        return t.dataset[`tweDropdown${it.charAt(0).toUpperCase() + it.slice(1)}`] === \"\";\n    }\n    _getMenuElement() {\n        return h.next(this._element, Pe)[0];\n    }\n    _getPlacement() {\n        const t = this._element.parentNode;\n        if (t.dataset.tweDropdownPosition === ro) return _o;\n        if (t.dataset.tweDropdownPosition === oo) return go;\n        const e = t.dataset.tweDropdownAlignment === \"end\";\n        return t.dataset.tweDropdownPosition === no ? e ? ho : uo : e ? po : fo;\n    }\n    _detectNavbar() {\n        return this._element.closest(ao) !== null;\n    }\n    _getOffset() {\n        const { offset: t } = this._config;\n        return typeof t == \"string\" ? t.split(\",\").map((e)=>Number.parseInt(e, 10)) : typeof t == \"function\" ? (e)=>t(e, this._element) : t;\n    }\n    _getPopperConfig() {\n        const t = {\n            placement: this._getPlacement(),\n            modifiers: [\n                {\n                    name: \"preventOverflow\",\n                    options: {\n                        boundary: this._config.boundary\n                    }\n                },\n                {\n                    name: \"offset\",\n                    options: {\n                        offset: this._getOffset()\n                    }\n                }\n            ]\n        };\n        return this._config.display === \"static\" && (t.modifiers = [\n            {\n                name: \"applyStyles\",\n                enabled: !1\n            }\n        ]), {\n            ...t,\n            ...typeof this._config.popperConfig == \"function\" ? this._config.popperConfig(t) : this._config.popperConfig\n        };\n    }\n    _selectMenuItem({ key: t, target: e }) {\n        const s = h.find(co, this._menu).filter(kt);\n        s.length && Bs(s, e, t === fe, !s.includes(e)).focus();\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = X.getOrCreateInstance(this, t);\n            if (typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t]();\n            }\n        });\n    }\n    static clearMenus(t) {\n        if (t && (t.button === Gr || t.type === \"keyup\" && t.key !== Ki)) return;\n        const e = h.find(ne);\n        for(let s = 0, n = e.length; s < n; s++){\n            const r = X.getInstance(e[s]);\n            if (!r || r._config.autoClose === !1 || !r._isShown()) continue;\n            const o = {\n                relatedTarget: r._element\n            };\n            if (t) {\n                const a = t.composedPath(), l = a.includes(r._menu);\n                if (a.includes(r._element) || r._config.autoClose === \"inside\" && !l || r._config.autoClose === \"outside\" && l || r._menu.contains(t.target) && (t.type === \"keyup\" && t.key === Ki || /input|select|option|textarea|form/i.test(t.target.tagName))) continue;\n                t.type === \"click\" && (o.clickEvent = t);\n            }\n            r._completeHide(o);\n        }\n    }\n    static getParentFromElement(t) {\n        return nt(t) || t.parentNode;\n    }\n    static dataApiKeydownHandler(t) {\n        if (/input|textarea/i.test(t.target.tagName) ? t.key === Yi || t.key !== he && (t.key !== fe && t.key !== ni || t.target.closest(Pe)) : !Qr.test(t.key)) return;\n        const e = this.dataset[`tweDropdown${it.charAt(0).toUpperCase() + it.slice(1)}`] === \"\";\n        if (!e && t.key === he || (t.preventDefault(), t.stopPropagation(), gt(this))) return;\n        const s = this.matches(ne) ? this : h.prev(this, ne)[0], n = X.getOrCreateInstance(s);\n        if (t.key === he) {\n            n.hide();\n            return;\n        }\n        if (t.key === ni || t.key === fe) {\n            e || n.show(), n._selectMenuItem(t);\n            return;\n        }\n        (!e || t.key === Yi) && X.clearMenus();\n    }\n}\nconst Me = \"collapse\", wn = \"twe.collapse\", Te = `.${wn}`, Xi = {\n    toggle: !0,\n    parent: null\n}, wo = {\n    toggle: \"boolean\",\n    parent: \"(null|element)\"\n}, To = `show${Te}`, yo = `shown${Te}`, Ao = `hide${Te}`, Co = `hidden${Te}`, He = \"data-twe-collapse-show\", Gi = \"data-twe-collapse-collapsed\", re = \"data-twe-collapse-collapsing\", Oo = \"data-twe-collapse-horizontal\", Nt = \"data-twe-collapse-item\", Qi = `:scope [${Nt}] [${Nt}]`, Do = \"width\", No = \"height\", So = \"[data-twe-collapse-item][data-twe-collapse-show], [data-twe-collapse-item][data-twe-collapse-collapsing]\", Zi = \"[data-twe-collapse-init]\", Lo = {\n    visible: \"!visible\",\n    hidden: \"hidden\",\n    baseTransition: \"overflow-hidden duration-[350ms] ease-[cubic-bezier(0.25,0.1,0.25,1.0)] motion-reduce:transition-none\",\n    collapsing: \"h-0 transition-[height] overflow-hidden duration-[350ms] ease-[cubic-bezier(0.25,0.1,0.25,1.0)] motion-reduce:transition-none\",\n    collapsingHorizontal: \"w-0 h-auto transition-[width] overflow-hidden duration-[350ms] ease-[cubic-bezier(0.25,0.1,0.25,1.0)] motion-reduce:transition-none\"\n}, $o = {\n    visible: \"string\",\n    hidden: \"string\",\n    baseTransition: \"string\",\n    collapsing: \"string\",\n    collapsingHorizontal: \"string\"\n};\nclass pe extends tt {\n    constructor(t, e, s){\n        super(t), this._isTransitioning = !1, this._config = this._getConfig(e), this._classes = this._getClasses(s), this._triggerArray = [];\n        const n = h.find(Zi);\n        for(let r = 0, o = n.length; r < o; r++){\n            const a = n[r], l = ci(a), u = h.find(l).filter((c)=>c === this._element);\n            l !== null && u.length && (this._selector = l, this._triggerArray.push(a));\n        }\n        this._initializeChildren(), this._config.parent || this._addAriaAndCollapsedClass(this._triggerArray, this._isShown()), this._config.toggle && this.toggle();\n    }\n    // Getters\n    static get Default() {\n        return Xi;\n    }\n    static get NAME() {\n        return Me;\n    }\n    // Public\n    toggle() {\n        this._isShown() ? this.hide() : this.show();\n    }\n    show() {\n        if (this._isTransitioning || this._isShown()) return;\n        let t = [], e;\n        if (this._config.parent) {\n            const c = h.find(Qi, this._config.parent);\n            t = h.find(So, this._config.parent).filter((f)=>!c.includes(f));\n        }\n        const s = h.findOne(this._selector);\n        if (t.length) {\n            const c = t.find((f)=>s !== f);\n            if (e = c ? pe.getInstance(c) : null, e && e._isTransitioning) return;\n        }\n        if (d.trigger(this._element, To).defaultPrevented) return;\n        t.forEach((c)=>{\n            s !== c && pe.getOrCreateInstance(c, {\n                toggle: !1\n            }).hide(), e || V.setData(c, wn, null);\n        });\n        const r = this._getDimension(), o = r === \"height\" ? this._classes.collapsing : this._classes.collapsingHorizontal;\n        E.removeClass(this._element, this._classes.visible), E.removeClass(this._element, this._classes.hidden), E.addClass(this._element, o), this._element.removeAttribute(Nt), this._element.setAttribute(re, \"\"), this._element.style[r] = 0, this._addAriaAndCollapsedClass(this._triggerArray, !0), this._isTransitioning = !0;\n        const a = ()=>{\n            this._isTransitioning = !1, E.removeClass(this._element, this._classes.hidden), E.removeClass(this._element, o), E.addClass(this._element, this._classes.visible), this._element.removeAttribute(re), this._element.setAttribute(Nt, \"\"), this._element.setAttribute(He, \"\"), this._element.style[r] = \"\", d.trigger(this._element, yo);\n        }, u = `scroll${r[0].toUpperCase() + r.slice(1)}`;\n        this._queueCallback(a, this._element, !0), this._element.style[r] = `${this._element[u]}px`;\n    }\n    hide() {\n        if (this._isTransitioning || !this._isShown() || d.trigger(this._element, Ao).defaultPrevented) return;\n        const e = this._getDimension(), s = e === \"height\" ? this._classes.collapsing : this._classes.collapsingHorizontal;\n        this._element.style[e] = `${this._element.getBoundingClientRect()[e]}px`, Xt(this._element), E.addClass(this._element, s), E.removeClass(this._element, this._classes.visible), E.removeClass(this._element, this._classes.hidden), this._element.setAttribute(re, \"\"), this._element.removeAttribute(Nt), this._element.removeAttribute(He);\n        const n = this._triggerArray.length;\n        for(let o = 0; o < n; o++){\n            const a = this._triggerArray[o], l = nt(a);\n            l && !this._isShown(l) && this._addAriaAndCollapsedClass([\n                a\n            ], !1);\n        }\n        this._isTransitioning = !0;\n        const r = ()=>{\n            this._isTransitioning = !1, E.removeClass(this._element, s), E.addClass(this._element, this._classes.visible), E.addClass(this._element, this._classes.hidden), this._element.removeAttribute(re), this._element.setAttribute(Nt, \"\"), d.trigger(this._element, Co);\n        };\n        this._element.style[e] = \"\", this._queueCallback(r, this._element, !0);\n    }\n    _isShown(t = this._element) {\n        return t.hasAttribute(He);\n    }\n    // Private\n    _getConfig(t) {\n        return t = {\n            ...Xi,\n            ...E.getDataAttributes(this._element),\n            ...t\n        }, t.toggle = !!t.toggle, t.parent = rt(t.parent), R(Me, t, wo), t;\n    }\n    _getClasses(t) {\n        const e = E.getDataClassAttributes(this._element);\n        return t = {\n            ...Lo,\n            ...e,\n            ...t\n        }, R(Me, t, $o), t;\n    }\n    _getDimension() {\n        return this._element.hasAttribute(Oo) ? Do : No;\n    }\n    _initializeChildren() {\n        if (!this._config.parent) return;\n        const t = h.find(Qi, this._config.parent);\n        h.find(Zi, this._config.parent).filter((e)=>!t.includes(e)).forEach((e)=>{\n            const s = nt(e);\n            s && this._addAriaAndCollapsedClass([\n                e\n            ], this._isShown(s));\n        });\n    }\n    _addAriaAndCollapsedClass(t, e) {\n        t.length && t.forEach((s)=>{\n            e ? s.removeAttribute(Gi) : s.setAttribute(`${Gi}`, \"\"), s.setAttribute(\"aria-expanded\", e);\n        });\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = {};\n            typeof t == \"string\" && /show|hide/.test(t) && (e.toggle = !1);\n            const s = pe.getOrCreateInstance(this, e);\n            if (typeof t == \"string\") {\n                if (typeof s[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                s[t]();\n            }\n        });\n    }\n}\nconst Ji = \".fixed-top, .fixed-bottom, .is-fixed, .sticky-top\", ts = \".sticky-top\";\nclass ri {\n    constructor(){\n        this._element = document.body;\n    }\n    getWidth() {\n        const t = document.documentElement.clientWidth;\n        return Math.abs(window.innerWidth - t);\n    }\n    hide() {\n        const t = this.getWidth();\n        this._disableOverFlow(), this._setElementAttributes(this._element, \"paddingRight\", (e)=>e + t), this._setElementAttributes(Ji, \"paddingRight\", (e)=>e + t), this._setElementAttributes(ts, \"marginRight\", (e)=>e - t);\n    }\n    _disableOverFlow() {\n        this._saveInitialAttribute(this._element, \"overflow\"), this._element.style.overflow = \"hidden\";\n    }\n    _setElementAttributes(t, e, s) {\n        const n = this.getWidth(), r = (o)=>{\n            if (o !== this._element && window.innerWidth > o.clientWidth + n) return;\n            this._saveInitialAttribute(o, e);\n            const a = window.getComputedStyle(o)[e];\n            o.style[e] = `${s(Number.parseFloat(a))}px`;\n        };\n        this._applyManipulationCallback(t, r);\n    }\n    reset() {\n        this._resetElementAttributes(this._element, \"overflow\"), this._resetElementAttributes(this._element, \"paddingRight\"), this._resetElementAttributes(Ji, \"paddingRight\"), this._resetElementAttributes(ts, \"marginRight\");\n    }\n    _saveInitialAttribute(t, e) {\n        const s = t.style[e];\n        s && E.setDataAttribute(t, e, s);\n    }\n    _resetElementAttributes(t, e) {\n        const s = (n)=>{\n            const r = E.getDataAttribute(n, e);\n            typeof r > \"u\" ? n.style.removeProperty(e) : (E.removeDataAttribute(n, e), n.style[e] = r);\n        };\n        this._applyManipulationCallback(t, s);\n    }\n    _applyManipulationCallback(t, e) {\n        St(t) ? e(t) : h.find(t, this._element).forEach(e);\n    }\n    isOverflowing() {\n        return this.getWidth() > 0;\n    }\n}\nconst Io = {\n    isVisible: !0,\n    // if false, we use the backdrop helper without adding any element to the dom\n    isAnimated: !1,\n    rootElement: \"body\",\n    // give the choice to place backdrop under different elements\n    clickCallback: null,\n    backdropClasses: null\n}, Ro = {\n    isVisible: \"boolean\",\n    isAnimated: \"boolean\",\n    rootElement: \"(element|string)\",\n    clickCallback: \"(function|null)\",\n    backdropClasses: \"(array|string|null)\"\n}, Tn = \"backdrop\", es = `mousedown.twe.${Tn}`;\nclass yn {\n    constructor(t){\n        this._config = this._getConfig(t), this._isAppended = !1, this._element = null;\n    }\n    show(t) {\n        if (!this._config.isVisible) {\n            _t(t);\n            return;\n        }\n        this._append(), this._config.isAnimated && Xt(this._getElement());\n        const e = this._config.backdropClasses || [\n            \"opacity-50\",\n            \"transition-all\",\n            \"duration-300\",\n            \"ease-in-out\",\n            \"fixed\",\n            \"top-0\",\n            \"left-0\",\n            \"z-[1040]\",\n            \"bg-black\",\n            \"w-screen\",\n            \"h-screen\"\n        ];\n        E.removeClass(this._getElement(), \"opacity-0\"), E.addClass(this._getElement(), e), this._element.setAttribute(\"data-twe-backdrop-show\", \"\"), this._emulateAnimation(()=>{\n            _t(t);\n        });\n    }\n    hide(t) {\n        if (!this._config.isVisible) {\n            _t(t);\n            return;\n        }\n        this._element.removeAttribute(\"data-twe-backdrop-show\"), this._getElement().classList.add(\"opacity-0\"), this._getElement().classList.remove(\"opacity-50\"), this._emulateAnimation(()=>{\n            this.dispose(), _t(t);\n        });\n    }\n    update(t = {}) {\n        this._config = this._getConfig({\n            ...this._config,\n            ...t\n        });\n    }\n    // Private\n    _getElement() {\n        if (!this._element) {\n            const t = document.createElement(\"div\");\n            this._element = t;\n        }\n        return this._element;\n    }\n    _getConfig(t) {\n        return t = {\n            ...Io,\n            ...typeof t == \"object\" ? t : {}\n        }, t.rootElement = rt(t.rootElement), R(Tn, t, Ro), t;\n    }\n    _append() {\n        this._isAppended || (this._config.rootElement.append(this._getElement()), d.on(this._getElement(), es, ()=>{\n            _t(this._config.clickCallback);\n        }), this._isAppended = !0);\n    }\n    dispose() {\n        this._isAppended && (d.off(this._element, es), this._element.remove(), this._isAppended = !1);\n    }\n    _emulateAnimation(t) {\n        Ws(t, this._getElement(), this._config.isAnimated);\n    }\n}\nclass An {\n    constructor(t, e = {}, s){\n        this._element = t, this._toggler = s, this._event = e.event || \"blur\", this._condition = e.condition || (()=>!0), this._selector = e.selector || 'button, a, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])', this._onlyVisible = e.onlyVisible || !1, this._focusableElements = [], this._firstElement = null, this._lastElement = null, this.handler = (n)=>{\n            this._condition(n) && !n.shiftKey && n.target === this._lastElement ? (n.preventDefault(), this._firstElement.focus()) : this._condition(n) && n.shiftKey && n.target === this._firstElement && (n.preventDefault(), this._lastElement.focus());\n        };\n    }\n    trap() {\n        this._setElements(), this._init(), this._setFocusTrap();\n    }\n    disable() {\n        this._focusableElements.forEach((t)=>{\n            t.removeEventListener(this._event, this.handler);\n        }), this._toggler && this._toggler.focus();\n    }\n    update() {\n        this._setElements(), this._setFocusTrap();\n    }\n    _init() {\n        const t = (e)=>{\n            !this._firstElement || e.key !== \"Tab\" || this._focusableElements.includes(e.target) || (e.preventDefault(), this._firstElement.focus(), window.removeEventListener(\"keydown\", t));\n        };\n        window.addEventListener(\"keydown\", t);\n    }\n    _filterVisible(t) {\n        return t.filter((e)=>{\n            if (!kt(e)) return !1;\n            const s = h.parents(e, \"*\");\n            for(let n = 0; n < s.length; n++){\n                const r = window.getComputedStyle(s[n]);\n                if (r && (r.display === \"none\" || r.visibility === \"hidden\")) return !1;\n            }\n            return !0;\n        });\n    }\n    _setElements() {\n        const t = h.find(this._selector, this._element);\n        this._focusableElements = t.filter((e)=>{\n            const s = e.getAttribute(\"data-twe-disabled\") === \"true\" || e.hasAttribute(\"disabled\");\n            return e.disabled || s ? null : e;\n        }), this._onlyVisible && (this._focusableElements = this._filterVisible(this._focusableElements)), this._firstElement = this._focusableElements[0], this._lastElement = this._focusableElements[this._focusableElements.length - 1];\n    }\n    _setFocusTrap() {\n        this._focusableElements.forEach((t, e)=>{\n            e === this._focusableElements.length - 1 || e === 0 ? t.addEventListener(this._event, this.handler) : t.removeEventListener(this._event, this.handler);\n        });\n    }\n}\nlet is = [];\nconst Cn = (i, t = \"hide\")=>{\n    const e = `click.dismiss${i.EVENT_KEY}`, s = i.NAME;\n    is.includes(s) || (is.push(s), d.on(document, e, `[data-twe-${s}-dismiss]`, function(n) {\n        if ([\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName) && n.preventDefault(), gt(this)) return;\n        const r = nt(this) || this.closest(`.${s}`) || this.closest(`[data-twe-${s}-init]`);\n        if (!r) return;\n        i.getOrCreateInstance(r)[t]();\n    }));\n}, xo = 9, ss = \"offcanvas\", ko = \"twe.offcanvas\", Mt = `.${ko}`, Po = \".data-api\", Mo = `load${Mt}${Po}`, Ho = \"Escape\", ns = {\n    backdrop: !0,\n    keyboard: !0,\n    scroll: !1\n}, Vo = {\n    backdrop: \"boolean\",\n    keyboard: \"boolean\",\n    scroll: \"boolean\"\n}, rs = \"show\", Wo = \"[data-twe-offcanvas-init][data-twe-offcanvas-show]\", Bo = `show${Mt}`, jo = `shown${Mt}`, Uo = `hide${Mt}`, Fo = `hidden${Mt}`, Yo = `keydown.dismiss${Mt}`;\nclass _e extends tt {\n    constructor(t, e){\n        super(t), this._config = this._getConfig(e), this._isShown = !1, this._backdrop = this._initializeBackDrop(), this._focustrap = this._initializeFocusTrap(), this._addEventListeners(), this._didInit = !1, this._init();\n    }\n    // Getters\n    static get NAME() {\n        return ss;\n    }\n    static get Default() {\n        return ns;\n    }\n    // Public\n    toggle(t) {\n        return this._isShown ? this.hide() : this.show(t);\n    }\n    show(t) {\n        if (this._isShown || d.trigger(this._element, Bo, {\n            relatedTarget: t\n        }).defaultPrevented) return;\n        this._isShown = !0, this._element.style.visibility = \"visible\", this._backdrop.show(), this._config.scroll || new ri().hide(), this._element.removeAttribute(\"aria-hidden\"), this._element.setAttribute(\"aria-modal\", !0), this._element.setAttribute(\"role\", \"dialog\"), this._element.setAttribute(`data-twe-offcanvas-${rs}`, \"\");\n        const s = ()=>{\n            this._config.scroll || this._focustrap.trap(), d.trigger(this._element, jo, {\n                relatedTarget: t\n            });\n        };\n        this._queueCallback(s, this._element, !0);\n    }\n    hide() {\n        if (!this._isShown || d.trigger(this._element, Uo).defaultPrevented) return;\n        this._focustrap.disable(), this._element.blur(), this._isShown = !1, this._element.removeAttribute(`data-twe-offcanvas-${rs}`), this._backdrop.hide();\n        const e = ()=>{\n            this._element.setAttribute(\"aria-hidden\", !0), this._element.removeAttribute(\"aria-modal\"), this._element.removeAttribute(\"role\"), this._element.style.visibility = \"hidden\", this._config.scroll || new ri().reset(), d.trigger(this._element, Fo);\n        };\n        this._queueCallback(e, this._element, !0);\n    }\n    dispose() {\n        this._backdrop.dispose(), this._focustrap.disable(), super.dispose();\n    }\n    // Private\n    _init() {\n        this._didInit || (d.on(window, Mo, ()=>h.find(Wo).forEach((t)=>_e.getOrCreateInstance(t).show())), this._didInit = !0, Cn(_e));\n    }\n    _getConfig(t) {\n        return t = {\n            ...ns,\n            ...E.getDataAttributes(this._element),\n            ...typeof t == \"object\" ? t : {}\n        }, R(ss, t, Vo), t;\n    }\n    _initializeBackDrop() {\n        return new yn({\n            isVisible: this._config.backdrop,\n            isAnimated: !0,\n            rootElement: this._element.parentNode,\n            clickCallback: ()=>this.hide()\n        });\n    }\n    _initializeFocusTrap() {\n        return new An(this._element, {\n            event: \"keydown\",\n            condition: (t)=>t.keyCode === xo,\n            onlyVisible: !0\n        });\n    }\n    _addEventListeners() {\n        d.on(this._element, Yo, (t)=>{\n            this._config.keyboard && t.key === Ho && this.hide();\n        });\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = _e.getOrCreateInstance(this, t);\n            if (typeof t == \"string\") {\n                if (e[t] === void 0 || t.startsWith(\"_\") || t === \"constructor\") throw new TypeError(`No method named \"${t}\"`);\n                e[t](this);\n            }\n        });\n    }\n}\nconst Ve = \"carousel\", Ko = \"twe.carousel\", U = `.${Ko}`, On = \".data-api\", zo = \"ArrowLeft\", qo = \"ArrowRight\", Xo = 500, Go = 40, os = {\n    interval: 5e3,\n    keyboard: !0,\n    ride: !1,\n    pause: \"hover\",\n    wrap: !0,\n    touch: !0\n}, Qo = {\n    interval: \"(number|boolean)\",\n    keyboard: \"boolean\",\n    ride: \"(boolean|string)\",\n    pause: \"(string|boolean)\",\n    wrap: \"boolean\",\n    touch: \"boolean\"\n}, Zo = {\n    pointer: \"touch-pan-y\",\n    block: \"!block\",\n    visible: \"data-[twe-carousel-fade]:opacity-100 data-[twe-carousel-fade]:z-[1]\",\n    invisible: \"data-[twe-carousel-fade]:z-0 data-[twe-carousel-fade]:opacity-0 data-[twe-carousel-fade]:duration-[600ms] data-[twe-carousel-fade]:delay-600\",\n    slideRight: \"translate-x-full\",\n    slideLeft: \"-translate-x-full\"\n}, Jo = {\n    pointer: \"string\",\n    block: \"string\",\n    visible: \"string\",\n    invisible: \"string\",\n    slideRight: \"string\",\n    slideLeft: \"string\"\n}, ht = \"next\", ft = \"prev\", pt = \"left\", Yt = \"right\", ta = {\n    [zo]: Yt,\n    [qo]: pt\n}, ea = `slide${U}`, We = `slid${U}`, ia = `keydown${U}`, sa = `mouseenter${U}`, na = `mouseleave${U}`, ra = `touchstart${U}`, oa = `touchmove${U}`, aa = `touchend${U}`, la = `pointerdown${U}`, ca = `pointerup${U}`, da = `dragstart${U}`, as = `load${U}${On}`, ls = `click${U}${On}`, Wt = \"data-twe-carousel-active\", ua = \"data-twe-carousel-item-end\", Be = \"data-twe-carousel-item-start\", ha = \"data-twe-carousel-item-next\", fa = \"data-twe-carousel-item-prev\", pa = \"data-twe-carousel-pointer-event\", _a = \"[data-twe-carousel-init]\", Dn = \"[data-twe-carousel-active]\", Ai = \"[data-twe-carousel-item]\", Tt = `${Dn}${Ai}`, ga = `${Ai} img`, ma = \"[data-twe-carousel-item-next], [data-twe-carousel-item-prev]\", Ea = \"[data-twe-carousel-indicators]\", va = \"[data-twe-target]\", cs = \"[data-twe-slide], [data-twe-slide-to]\", ba = \"touch\", wa = \"pen\";\nclass Z extends tt {\n    constructor(t, e, s){\n        super(t), this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this.touchStartX = 0, this.touchDeltaX = 0, this._config = this._getConfig(e), this._classes = this._getClasses(s), this._indicatorsElement = h.findOne(Ea, this._element), this._touchSupported = \"ontouchstart\" in document.documentElement || navigator.maxTouchPoints > 0, this._pointerEvent = !!window.PointerEvent, this._setActiveElementClass(), this._addEventListeners(), this._didInit = !1, this._init(), this._config.ride === \"carousel\" && this.cycle();\n    }\n    // Getters\n    static get Default() {\n        return os;\n    }\n    static get NAME() {\n        return Ve;\n    }\n    // Public\n    next() {\n        this._slide(ht);\n    }\n    nextWhenVisible() {\n        !document.hidden && kt(this._element) && this.next();\n    }\n    prev() {\n        this._slide(ft);\n    }\n    pause(t) {\n        t || (this._isPaused = !0), h.findOne(ma, this._element) && (Ps(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;\n    }\n    cycle(t) {\n        t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config && this._config.interval && !this._isPaused && (this._updateInterval(), this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));\n    }\n    to(t) {\n        this._activeElement = h.findOne(Tt, this._element);\n        const e = this._getItemIndex(this._activeElement);\n        if (t > this._items.length - 1 || t < 0) return;\n        if (this._isSliding) {\n            d.one(this._element, We, ()=>this.to(t));\n            return;\n        }\n        if (e === t) {\n            this.pause(), this.cycle();\n            return;\n        }\n        const s = t > e ? ht : ft;\n        this._slide(s, this._items[t]);\n    }\n    dispose() {\n        d.off(document, ls, cs, Z.dataApiClickHandler), d.off(window, as), super.dispose();\n    }\n    // Private\n    _init() {\n        this._didInit || (d.on(document, ls, cs, Z.dataApiClickHandler), d.on(window, as, ()=>{\n            const t = h.find(_a);\n            for(let e = 0, s = t.length; e < s; e++)Z.carouselInterface(t[e], Z.getInstance(t[e]));\n        }), this._didInit = !0);\n    }\n    _getConfig(t) {\n        return t = {\n            ...os,\n            ...E.getDataAttributes(this._element),\n            ...typeof t == \"object\" ? t : {}\n        }, R(Ve, t, Qo), t;\n    }\n    _getClasses(t) {\n        const e = E.getDataClassAttributes(this._element);\n        return t = {\n            ...Zo,\n            ...e,\n            ...t\n        }, R(Ve, t, Jo), t;\n    }\n    _enableCycle() {\n        if (this._config.ride) {\n            if (this._isSliding) {\n                d.one(this._element, We, ()=>this.cycle());\n                return;\n            }\n            this.cycle();\n        }\n    }\n    _applyInitialClasses() {\n        const t = h.findOne(Tt, this._element);\n        t.classList.add(this._classes.block, ...this._classes.visible.split(\" \")), this._setActiveIndicatorElement(t);\n    }\n    _handleSwipe() {\n        const t = Math.abs(this.touchDeltaX);\n        if (t <= Go) return;\n        const e = t / this.touchDeltaX;\n        this.touchDeltaX = 0, e && this._slide(e > 0 ? Yt : pt);\n    }\n    _setActiveElementClass() {\n        this._activeElement = h.findOne(Tt, this._element), E.addClass(this._activeElement, \"hidden\");\n    }\n    _addEventListeners() {\n        this._config.keyboard && d.on(this._element, ia, (t)=>this._keydown(t)), this._config.pause === \"hover\" && (d.on(this._element, sa, (t)=>this.pause(t)), d.on(this._element, na, (t)=>this._enableCycle(t))), this._config.touch && this._touchSupported && this._addTouchEventListeners(), this._applyInitialClasses();\n    }\n    _addTouchEventListeners() {\n        const t = (r)=>this._pointerEvent && (r.pointerType === wa || r.pointerType === ba), e = (r)=>{\n            t(r) ? this.touchStartX = r.clientX : this._pointerEvent || (this.touchStartX = r.touches[0].clientX);\n        }, s = (r)=>{\n            this.touchDeltaX = r.touches && r.touches.length > 1 ? 0 : r.touches[0].clientX - this.touchStartX;\n        }, n = (r)=>{\n            t(r) && (this.touchDeltaX = r.clientX - this.touchStartX), this._handleSwipe(), this._config.pause === \"hover\" && (this.pause(), this.touchTimeout && clearTimeout(this.touchTimeout), this.touchTimeout = setTimeout((o)=>this._enableCycle(o), Xo + this._config.interval));\n        };\n        h.find(ga, this._element).forEach((r)=>{\n            d.on(r, da, (o)=>o.preventDefault());\n        }), this._pointerEvent ? (d.on(this._element, la, (r)=>e(r)), d.on(this._element, ca, (r)=>n(r)), this._element.classList.add(this._classes.pointer), this._element.setAttribute(`${pa}`, \"\")) : (d.on(this._element, ra, (r)=>e(r)), d.on(this._element, oa, (r)=>s(r)), d.on(this._element, aa, (r)=>n(r)));\n    }\n    _keydown(t) {\n        if (/input|textarea/i.test(t.target.tagName)) return;\n        const e = ta[t.key];\n        e && (t.preventDefault(), this._slide(e));\n    }\n    _getItemIndex(t) {\n        return this._items = t && t.parentNode ? h.find(Ai, t.parentNode) : [], this._items.indexOf(t);\n    }\n    _getItemByOrder(t, e) {\n        const s = t === ht;\n        return Bs(this._items, e, s, this._config.wrap);\n    }\n    _triggerSlideEvent(t, e) {\n        const s = this._getItemIndex(t), n = this._getItemIndex(h.findOne(Tt, this._element));\n        return d.trigger(this._element, ea, {\n            relatedTarget: t,\n            direction: e,\n            from: n,\n            to: s\n        });\n    }\n    _setActiveIndicatorElement(t) {\n        if (this._indicatorsElement) {\n            const e = h.findOne(Dn, this._indicatorsElement);\n            e.removeAttribute(Wt), e.removeAttribute(\"aria-current\"), e.classList.remove(\"!opacity-100\");\n            const s = h.find(va, this._indicatorsElement);\n            for(let n = 0; n < s.length; n++)if (Number.parseInt(s[n].getAttribute(\"data-twe-slide-to\"), 10) === this._getItemIndex(t)) {\n                s[n].setAttribute(`${Wt}`, \"\"), s[n].setAttribute(\"aria-current\", \"true\"), s[n].classList.add(\"!opacity-100\");\n                break;\n            }\n        }\n    }\n    _updateInterval() {\n        const t = this._activeElement || h.findOne(Tt, this._element);\n        if (!t) return;\n        const e = Number.parseInt(t.getAttribute(\"data-twe-interval\"), 10);\n        e ? (this._config.defaultInterval = this._config.defaultInterval || this._config.interval, this._config.interval = e) : this._config.interval = this._config.defaultInterval || this._config.interval;\n    }\n    _slide(t, e) {\n        const s = this._directionToOrder(t), n = h.findOne(Tt, this._element), r = this._getItemIndex(n), o = e || this._getItemByOrder(s, n), a = this._getItemIndex(o), l = !!this._interval, u = s === ht, c = u ? Be : ua, f = u ? ha : fa, v = this._orderToDirection(s), g = c === Be ? this._classes.slideLeft : this._classes.slideRight, O = c !== Be ? this._classes.slideLeft : this._classes.slideRight;\n        if (o && o.hasAttribute(Wt)) {\n            this._isSliding = !1;\n            return;\n        }\n        if (this._isSliding || this._triggerSlideEvent(o, v).defaultPrevented || !n || !o) return;\n        this._isSliding = !0, l && this.pause(), this._setActiveIndicatorElement(o), this._activeElement = o;\n        const A = ()=>{\n            d.trigger(this._element, We, {\n                relatedTarget: o,\n                direction: v,\n                from: r,\n                to: a\n            });\n        };\n        o.setAttribute(`${f}`, \"\"), o.classList.add(this._classes.block, O), Xt(o), n.setAttribute(`${c}`, \"\"), n.classList.add(g, ...this._classes.invisible.split(\" \")), n.classList.remove(...this._classes.visible.split(\" \")), o.setAttribute(`${c}`, \"\"), o.classList.add(...this._classes.visible.split(\" \")), o.classList.remove(this._classes.slideRight, this._classes.slideLeft);\n        const D = ()=>{\n            o.removeAttribute(c), o.removeAttribute(f), o.setAttribute(`${Wt}`, \"\"), n.removeAttribute(Wt), n.classList.remove(g, ...this._classes.invisible.split(\" \"), this._classes.block), n.removeAttribute(f), n.removeAttribute(c), this._isSliding = !1, setTimeout(A, 0);\n        };\n        this._queueCallback(D, n, !0), (l || this._config.ride === !0) && this.cycle();\n    }\n    _directionToOrder(t) {\n        return [\n            Yt,\n            pt\n        ].includes(t) ? M() ? t === pt ? ft : ht : t === pt ? ht : ft : t;\n    }\n    _orderToDirection(t) {\n        return [\n            ht,\n            ft\n        ].includes(t) ? M() ? t === ft ? pt : Yt : t === ft ? Yt : pt : t;\n    }\n    // Static\n    static carouselInterface(t, e) {\n        const s = Z.getOrCreateInstance(t, e);\n        let { _config: n } = s;\n        typeof e == \"object\" && (n = {\n            ...n,\n            ...e\n        });\n        const r = typeof e == \"string\" ? e : e.slide;\n        if (typeof e == \"number\") {\n            s.to(e);\n            return;\n        }\n        if (typeof r == \"string\") {\n            if (typeof s[r] > \"u\") throw new TypeError(`No method named \"${r}\"`);\n            s[r]();\n        } else n.interval && n.ride === !0 && s.pause();\n    }\n    static jQueryInterface(t) {\n        return this.each(function() {\n            let e = Z.getOrCreateInstance(this);\n            if (typeof t == \"number\") {\n                e.to(t);\n                return;\n            }\n            if (typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t]();\n            }\n        });\n    }\n    static dataApiClickHandler(t) {\n        const e = nt(this);\n        if (!e) return;\n        const s = {\n            ...E.getDataAttributes(e),\n            ...E.getDataAttributes(this)\n        }, n = this.getAttribute(\"data-twe-slide-to\");\n        n && (s.interval = !1), Z.carouselInterface(e, s), n && Z.getInstance(e).to(n), t.preventDefault();\n    }\n}\nconst Ta = /* @__PURE__ */ new Set([\n    \"background\",\n    \"cite\",\n    \"href\",\n    \"itemtype\",\n    \"longdesc\",\n    \"poster\",\n    \"src\",\n    \"xlink:href\"\n]), ya = /^aria-[\\w-]*$/i, Aa = /^data-twe-[\\w-]*$/i, Ca = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i, Oa = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i, Da = (i, t)=>{\n    const e = i.nodeName.toLowerCase();\n    if (t.includes(e)) return Ta.has(e) ? !!(Ca.test(i.nodeValue) || Oa.test(i.nodeValue)) : !0;\n    const s = t.filter((n)=>n instanceof RegExp);\n    for(let n = 0, r = s.length; n < r; n++)if (s[n].test(e)) return !0;\n    return !1;\n}, Na = {\n    // Global attributes allowed on any supplied element below.\n    \"*\": [\n        \"class\",\n        \"dir\",\n        \"id\",\n        \"lang\",\n        \"role\",\n        ya,\n        Aa\n    ],\n    a: [\n        \"target\",\n        \"href\",\n        \"title\",\n        \"rel\"\n    ],\n    area: [],\n    b: [],\n    br: [],\n    col: [],\n    code: [],\n    div: [],\n    em: [],\n    hr: [],\n    h1: [],\n    h2: [],\n    h3: [],\n    h4: [],\n    h5: [],\n    h6: [],\n    i: [],\n    img: [\n        \"src\",\n        \"srcset\",\n        \"alt\",\n        \"title\",\n        \"width\",\n        \"height\"\n    ],\n    li: [],\n    ol: [],\n    p: [],\n    pre: [],\n    s: [],\n    small: [],\n    span: [],\n    sub: [],\n    sup: [],\n    strong: [],\n    u: [],\n    ul: []\n};\nfunction ds(i, t, e) {\n    if (!i.length) return i;\n    if (e && typeof e == \"function\") return e(i);\n    const n = new window.DOMParser().parseFromString(i, \"text/html\"), r = [].concat(...n.body.querySelectorAll(\"*\"));\n    for(let o = 0, a = r.length; o < a; o++){\n        const l = r[o], u = l.nodeName.toLowerCase();\n        if (!Object.keys(t).includes(u)) {\n            l.remove();\n            continue;\n        }\n        const c = [].concat(...l.attributes), f = [].concat(t[\"*\"] || [], t[u] || []);\n        c.forEach((v)=>{\n            Da(v, f) || l.removeAttribute(v.nodeName);\n        });\n    }\n    return n.body.innerHTML;\n}\nconst us = \"tooltip\", Sa = \"twe.tooltip\", z = `.${Sa}`, La = \"te-tooltip\", $a = /* @__PURE__ */ new Set([\n    \"sanitize\",\n    \"allowList\",\n    \"sanitizeFn\"\n]), Ia = {\n    animation: \"boolean\",\n    template: \"string\",\n    title: \"(string|element|function)\",\n    trigger: \"string\",\n    delay: \"(number|object)\",\n    html: \"boolean\",\n    selector: \"(string|boolean)\",\n    placement: \"(string|function)\",\n    offset: \"(array|string|function)\",\n    container: \"(string|element|boolean)\",\n    fallbackPlacements: \"array\",\n    boundary: \"(string|element)\",\n    customClass: \"(string|function)\",\n    sanitize: \"boolean\",\n    sanitizeFn: \"(null|function)\",\n    allowList: \"object\",\n    popperConfig: \"(null|object|function)\"\n}, Ra = {\n    AUTO: \"auto\",\n    TOP: \"top\",\n    RIGHT: M() ? \"left\" : \"right\",\n    BOTTOM: \"bottom\",\n    LEFT: M() ? \"right\" : \"left\"\n}, xa = {\n    animation: !0,\n    template: `\n    <div class=\"opacity-0 transition-opacity duration-300 ease-in-out absolute z-[1080] block m-0 text-sm not-italic font-normal text-left no-underline underline-offset-auto normal-case leading-6 tracking-normal break-normal whitespace-normal\" role=\"tooltip\">\n      <div data-twe-tooltip-inner-ref class=\"max-w-[200px] text-sm py-1.5 px-4 text-white text-center bg-[#6d6d6d] rounded\"></div>\n    </div>\n    `,\n    trigger: \"hover focus\",\n    title: \"\",\n    delay: 0,\n    html: !1,\n    selector: !1,\n    placement: \"top\",\n    offset: [\n        0,\n        0\n    ],\n    container: !1,\n    fallbackPlacements: [\n        \"top\",\n        \"right\",\n        \"bottom\",\n        \"left\"\n    ],\n    boundary: \"clippingParents\",\n    customClass: \"\",\n    sanitize: !0,\n    sanitizeFn: null,\n    allowList: Na,\n    popperConfig: {\n        hide: !0\n    }\n}, ka = {\n    HIDE: `hide${z}`,\n    HIDDEN: `hidden${z}`,\n    SHOW: `show${z}`,\n    SHOWN: `shown${z}`,\n    INSERTED: `inserted${z}`,\n    CLICK: `click${z}`,\n    FOCUSIN: `focusin${z}`,\n    FOCUSOUT: `focusout${z}`,\n    MOUSEENTER: `mouseenter${z}`,\n    MOUSELEAVE: `mouseleave${z}`\n}, Pa = \"fade\", Ma = \"modal\", je = \"show\", Bt = \"show\", Ue = \"out\", hs = \"[data-twe-tooltip-inner-ref]\", fs = `.${Ma}`, ps = \"hide.twe.modal\", jt = \"hover\", Fe = \"focus\", Ha = \"click\", Va = \"manual\";\nclass Qt extends tt {\n    constructor(t, e){\n        if (typeof bn > \"u\") throw new TypeError(\"Bootstrap's tooltips require Popper (https://popper.js.org)\");\n        super(t), this._isEnabled = !0, this._timeout = 0, this._hoverState = \"\", this._activeTrigger = {}, this._popper = null, this._config = this._getConfig(e), this.tip = null, this._setListeners();\n    }\n    // Getters\n    static get Default() {\n        return xa;\n    }\n    static get NAME() {\n        return us;\n    }\n    static get Event() {\n        return ka;\n    }\n    static get DefaultType() {\n        return Ia;\n    }\n    // Public\n    enable() {\n        this._isEnabled = !0;\n    }\n    disable() {\n        this._isEnabled = !1;\n    }\n    toggleEnabled() {\n        this._isEnabled = !this._isEnabled;\n    }\n    toggle(t) {\n        if (this._isEnabled) if (t) {\n            const e = this._initializeOnDelegatedTarget(t);\n            e._activeTrigger.click = !e._activeTrigger.click, e._isWithActiveTrigger() ? e._enter(null, e) : e._leave(null, e);\n        } else {\n            if (this.getTipElement().classList.contains(je)) {\n                this._leave(null, this);\n                return;\n            }\n            this._enter(null, this);\n        }\n    }\n    dispose() {\n        clearTimeout(this._timeout), d.off(this._element.closest(fs), ps, this._hideModalHandler), this.tip && this.tip.remove(), this._disposePopper(), super.dispose();\n    }\n    show() {\n        if (this._element.style.display === \"none\") throw new Error(\"Please use show on visible elements\");\n        if (!(this.isWithContent() && this._isEnabled)) return;\n        const t = d.trigger(this._element, this.constructor.Event.SHOW), e = Ms(this._element), s = e === null ? this._element.ownerDocument.documentElement.contains(this._element) : e.contains(this._element);\n        if (t.defaultPrevented || !s) return;\n        this.constructor.NAME === \"tooltip\" && this.tip && this.getTitle() !== this.tip.querySelector(hs).innerHTML && (this._disposePopper(), this.tip.remove(), this.tip = null);\n        const n = this.getTipElement(), r = Gn(this.constructor.NAME);\n        n.setAttribute(\"id\", r), this._element.setAttribute(\"aria-describedby\", r), this._config.animation && setTimeout(()=>{\n            this.tip.classList.add(\"opacity-100\"), this.tip.classList.remove(\"opacity-0\");\n        }, 100);\n        const o = typeof this._config.placement == \"function\" ? this._config.placement.call(this, n, this._element) : this._config.placement, a = this._getAttachment(o);\n        this._addAttachmentClass(a);\n        const { container: l } = this._config;\n        if (V.setData(n, this.constructor.DATA_KEY, this), this._element.ownerDocument.documentElement.contains(this.tip) || (l.append(n), d.trigger(this._element, this.constructor.Event.INSERTED)), this._popper ? this._popper.update() : this._popper = Ti(this._element, n, this._getPopperConfig(a)), n.getAttribute(\"id\").includes(\"tooltip\")) switch(o){\n            case \"bottom\":\n                n.classList.add(\"py-[0.4rem]\");\n                break;\n            case \"left\":\n                n.classList.add(\"px-[0.4rem]\");\n                break;\n            case \"right\":\n                n.classList.add(\"px-[0.4rem]\");\n                break;\n            default:\n                n.classList.add(\"py-[0.4rem]\");\n                break;\n        }\n        const c = this._resolvePossibleFunction(this._config.customClass);\n        c && n.classList.add(...c.split(\" \")), \"ontouchstart\" in document.documentElement && [].concat(...document.body.children).forEach((g)=>{\n            d.on(g, \"mouseover\", me);\n        });\n        const f = ()=>{\n            const g = this._hoverState;\n            this._hoverState = null, d.trigger(this._element, this.constructor.Event.SHOWN), g === Ue && this._leave(null, this);\n        }, v = this.tip.classList.contains(\"transition-opacity\");\n        this._queueCallback(f, this.tip, v);\n    }\n    hide() {\n        if (!this._popper) return;\n        const t = this.getTipElement(), e = ()=>{\n            this._isWithActiveTrigger() || (this._hoverState !== Bt && t.remove(), this._cleanTipClass(), this._element.removeAttribute(\"aria-describedby\"), d.trigger(this._element, this.constructor.Event.HIDDEN), this._disposePopper());\n        };\n        if (d.trigger(this._element, this.constructor.Event.HIDE).defaultPrevented) return;\n        t.classList.add(\"opacity-0\"), t.classList.remove(\"opacity-100\"), \"ontouchstart\" in document.documentElement && [].concat(...document.body.children).forEach((r)=>d.off(r, \"mouseover\", me)), this._activeTrigger[Ha] = !1, this._activeTrigger[Fe] = !1, this._activeTrigger[jt] = !1;\n        const n = this.tip.classList.contains(\"opacity-0\");\n        this._queueCallback(e, this.tip, n), this._hoverState = \"\";\n    }\n    update() {\n        this._popper !== null && this._popper.update();\n    }\n    // Protected\n    isWithContent() {\n        return !!this.getTitle();\n    }\n    getTipElement() {\n        if (this.tip) return this.tip;\n        const t = document.createElement(\"div\");\n        t.innerHTML = this._config.template;\n        const e = t.children[0];\n        return this.setContent(e), e.classList.remove(Pa, je), this.tip = e, this.tip;\n    }\n    setContent(t) {\n        this._sanitizeAndSetContent(t, this.getTitle(), hs);\n    }\n    _sanitizeAndSetContent(t, e, s) {\n        const n = h.findOne(s, t);\n        if (!e && n) {\n            n.remove();\n            return;\n        }\n        this.setElementContent(n, e);\n    }\n    setElementContent(t, e) {\n        if (t !== null) {\n            if (St(e)) {\n                e = rt(e), this._config.html ? e.parentNode !== t && (t.innerHTML = \"\", t.append(e)) : t.textContent = e.textContent;\n                return;\n            }\n            this._config.html ? (this._config.sanitize && (e = ds(e, this._config.allowList, this._config.sanitizeFn)), t.innerHTML = e) : t.textContent = e;\n        }\n    }\n    getTitle() {\n        const t = this._element.getAttribute(\"data-twe-original-title\") || this._config.title;\n        return this._resolvePossibleFunction(t);\n    }\n    updateAttachment(t) {\n        return t === \"right\" ? \"end\" : t === \"left\" ? \"start\" : t;\n    }\n    // Private\n    _initializeOnDelegatedTarget(t, e) {\n        return e || this.constructor.getOrCreateInstance(t.delegateTarget, this._getDelegateConfig());\n    }\n    _getOffset() {\n        const { offset: t } = this._config;\n        return typeof t == \"string\" ? t.split(\",\").map((e)=>Number.parseInt(e, 10)) : typeof t == \"function\" ? (e)=>t(e, this._element) : t;\n    }\n    _resolvePossibleFunction(t) {\n        return typeof t == \"function\" ? t.call(this._element) : t;\n    }\n    _getPopperConfig(t) {\n        const e = {\n            placement: t,\n            modifiers: [\n                {\n                    name: \"flip\",\n                    options: {\n                        fallbackPlacements: this._config.fallbackPlacements\n                    }\n                },\n                {\n                    name: \"offset\",\n                    options: {\n                        offset: this._getOffset()\n                    }\n                },\n                {\n                    name: \"preventOverflow\",\n                    options: {\n                        boundary: this._config.boundary\n                    }\n                },\n                {\n                    name: \"arrow\",\n                    options: {\n                        element: `.${this.constructor.NAME}-arrow`\n                    }\n                },\n                {\n                    name: \"onChange\",\n                    enabled: !0,\n                    phase: \"afterWrite\",\n                    fn: (s)=>this._handlePopperPlacementChange(s)\n                }\n            ],\n            onFirstUpdate: (s)=>{\n                s.options.placement !== s.placement && this._handlePopperPlacementChange(s);\n            }\n        };\n        return {\n            ...e,\n            ...typeof this._config.popperConfig == \"function\" ? this._config.popperConfig(e) : this._config.popperConfig\n        };\n    }\n    _addAttachmentClass(t) {\n        this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(t)}`);\n    }\n    _getAttachment(t) {\n        return Ra[t.toUpperCase()];\n    }\n    _setListeners() {\n        this._config.trigger.split(\" \").forEach((e)=>{\n            if (e === \"click\") d.on(this._element, this.constructor.Event.CLICK, this._config.selector, (s)=>this.toggle(s));\n            else if (e !== Va) {\n                const s = e === jt ? this.constructor.Event.MOUSEENTER : this.constructor.Event.FOCUSIN, n = e === jt ? this.constructor.Event.MOUSELEAVE : this.constructor.Event.FOCUSOUT;\n                d.on(this._element, s, this._config.selector, (r)=>this._enter(r)), d.on(this._element, n, this._config.selector, (r)=>this._leave(r));\n            }\n        }), this._hideModalHandler = ()=>{\n            this._element && this.hide();\n        }, d.on(this._element.closest(fs), ps, this._hideModalHandler), this._config.selector ? this._config = {\n            ...this._config,\n            trigger: \"manual\",\n            selector: \"\"\n        } : this._fixTitle();\n    }\n    _fixTitle() {\n        const t = this._element.getAttribute(\"title\"), e = typeof this._element.getAttribute(\"data-twe-original-title\");\n        (t || e !== \"string\") && (this._element.setAttribute(\"data-twe-original-title\", t || \"\"), t && !this._element.getAttribute(\"aria-label\") && !this._element.textContent && this._element.setAttribute(\"aria-label\", t), this._element.setAttribute(\"title\", \"\"));\n    }\n    _enter(t, e) {\n        if (e = this._initializeOnDelegatedTarget(t, e), t && (e._activeTrigger[t.type === \"focusin\" ? Fe : jt] = !0), e.getTipElement().classList.contains(je) || e._hoverState === Bt) {\n            e._hoverState = Bt;\n            return;\n        }\n        if (clearTimeout(e._timeout), e._hoverState = Bt, !e._config.delay || !e._config.delay.show) {\n            e.show();\n            return;\n        }\n        e._timeout = setTimeout(()=>{\n            e._hoverState === Bt && e.show();\n        }, e._config.delay.show);\n    }\n    _leave(t, e) {\n        if (e = this._initializeOnDelegatedTarget(t, e), t && (e._activeTrigger[t.type === \"focusout\" ? Fe : jt] = e._element.contains(t.relatedTarget)), !e._isWithActiveTrigger()) {\n            if (clearTimeout(e._timeout), e._hoverState = Ue, !e._config.delay || !e._config.delay.hide) {\n                e.hide();\n                return;\n            }\n            e._timeout = setTimeout(()=>{\n                e._hoverState === Ue && e.hide();\n            }, e._config.delay.hide);\n        }\n    }\n    _isWithActiveTrigger() {\n        for(const t in this._activeTrigger)if (this._activeTrigger[t]) return !0;\n        return !1;\n    }\n    _getConfig(t) {\n        const e = E.getDataAttributes(this._element);\n        return Object.keys(e).forEach((s)=>{\n            $a.has(s) && delete e[s];\n        }), t = {\n            ...this.constructor.Default,\n            ...e,\n            ...typeof t == \"object\" && t ? t : {}\n        }, t.container = t.container === !1 ? document.body : rt(t.container), typeof t.delay == \"number\" && (t.delay = {\n            show: t.delay,\n            hide: t.delay\n        }), typeof t.title == \"number\" && (t.title = t.title.toString()), typeof t.content == \"number\" && (t.content = t.content.toString()), R(us, t, this.constructor.DefaultType), t.sanitize && (t.template = ds(t.template, t.allowList, t.sanitizeFn)), t;\n    }\n    _getDelegateConfig() {\n        const t = {};\n        for(const e in this._config)this.constructor.Default[e] !== this._config[e] && (t[e] = this._config[e]);\n        return t;\n    }\n    _cleanTipClass() {\n        const t = this.getTipElement(), e = new RegExp(`(^|\\\\s)${this._getBasicClassPrefix()}\\\\S+`, \"g\"), s = t.getAttribute(\"class\").match(e);\n        s !== null && s.length > 0 && s.map((n)=>n.trim()).forEach((n)=>t.classList.remove(n));\n    }\n    _getBasicClassPrefix() {\n        return La;\n    }\n    _handlePopperPlacementChange(t) {\n        const { state: e } = t;\n        e && (this.tip = e.elements.popper, this._cleanTipClass(), this._addAttachmentClass(this._getAttachment(e.placement)));\n    }\n    _disposePopper() {\n        this._popper && (this._popper.destroy(), this._popper = null);\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = Qt.getOrCreateInstance(this, t);\n            if (typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t]();\n            }\n        });\n    }\n}\nconst Wa = \"popover\", Ba = \"twe.popover\", q = `.${Ba}`, ja = \"te-popover\", Ua = {\n    ...Qt.Default,\n    placement: \"right\",\n    offset: [\n        0,\n        8\n    ],\n    trigger: \"click\",\n    content: \"\",\n    template: `\n    <div class=\"opacity-0 transition-opacity duration-150 ease-in-out absolute top-0 left-0 z-[1070] block max-w-[267px] break-words bg-white bg-clip-padding border border-neutral-100 rounded-lg shadow-2 text-sm not-italic font-normal text-left no-underline underline-offset-auto normal-case leading-6 tracking-normal break-normal whitespace-normal dark:border-white/10 dark:bg-surface-dark dark:text-white data-[popper-reference-hidden]:hidden\" role=\"tooltip\">\n      <h3 data-twe-popover-header-ref class=\"py-2 px-4 mb-0 border-b-2 border-neutral-100 rounded-t-lg font-medium empty:hidden dark:border-white/10\"></h3>\n      <div data-twe-popover-body-ref class=\"p-4 text-surface dark:text-white\"></div>\n    </div>\n    `\n}, Fa = {\n    ...Qt.DefaultType,\n    content: \"(string|element|function)\"\n}, Ya = {\n    HIDE: `hide${q}`,\n    HIDDEN: `hidden${q}`,\n    SHOW: `show${q}`,\n    SHOWN: `shown${q}`,\n    INSERTED: `inserted${q}`,\n    CLICK: `click${q}`,\n    FOCUSIN: `focusin${q}`,\n    FOCUSOUT: `focusout${q}`,\n    MOUSEENTER: `mouseenter${q}`,\n    MOUSELEAVE: `mouseleave${q}`\n}, Ka = \"[data-twe-popover-header-ref]\", za = \"[data-twe-popover-body-ref]\";\nclass Nn extends Qt {\n    // Getters\n    static get Default() {\n        return Ua;\n    }\n    static get NAME() {\n        return Wa;\n    }\n    static get Event() {\n        return Ya;\n    }\n    static get DefaultType() {\n        return Fa;\n    }\n    // Overrides\n    isWithContent() {\n        return this.getTitle() || this._getContent();\n    }\n    setContent(t) {\n        this._sanitizeAndSetContent(t, this.getTitle(), Ka), this._sanitizeAndSetContent(t, this._getContent(), za);\n    }\n    // Private\n    _getContent() {\n        return this._resolvePossibleFunction(this._config.content);\n    }\n    _getBasicClassPrefix() {\n        return ja;\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = Nn.getOrCreateInstance(this, t);\n            if (typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t]();\n            }\n        });\n    }\n}\nconst Ye = \"scrollspy\", qa = \"twe.scrollspy\", Ci = `.${qa}`, _s = {\n    offset: 10,\n    method: \"auto\",\n    target: \"\"\n}, Xa = {\n    offset: \"number\",\n    method: \"string\",\n    target: \"(string|element)\"\n}, Ga = {\n    active: \"!text-primary font-semibold border-s-[0.125rem] border-solid border-primary\"\n}, Qa = {\n    active: \"string\"\n}, Ke = `activate${Ci}`, Za = `scroll${Ci}`, Kt = \"data-twe-nav-link-active\", Sn = \"data-twe-collapsible-scrollspy-ref\", Ln = \"[data-twe-dropdown-item-ref]\", Ja = \"[data-twe-nav-list-ref]\", oi = \"[data-twe-nav-link-ref]\", tl = \"[data-twe-nav-item-ref]\", $n = \"[data-twe-list-group-item-ref]\", ze = `${oi}, ${$n}, ${Ln}`, el = \"[data-twe-dropdown-ref]\", il = \"[data-twe-dropdown-toggle-ref]\", gs = `[${Sn}]`, sl = `[${Kt}]`, qe = \"ul\", nl = \"maxOffset\", ms = \"position\";\nclass In extends tt {\n    constructor(t, e, s){\n        super(t), this._scrollElement = this._element.tagName === \"BODY\" ? window : this._element, this._config = this._getConfig(e), this._classes = this._getClasses(s), this._offsets = [], this._targets = [], this._collapsibles = [], this._activeTarget = null, this._scrollHeight = 0, d.on(this._scrollElement, Za, ()=>this._process()), this.refresh(), this._process(), this._bindActivateEvent(), this._getCollapsibles(), this._collapsibles.length !== 0 && (this._showSubsection(), this._hideSubsection());\n    }\n    // Getters\n    static get Default() {\n        return _s;\n    }\n    static get NAME() {\n        return Ye;\n    }\n    // Public\n    refresh() {\n        const t = this._scrollElement === this._scrollElement.window ? nl : ms, e = this._config.method === \"auto\" ? t : this._config.method, s = e === ms ? this._getScrollTop() : 0;\n        this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), h.find(ze, this._config.target).map((r)=>{\n            const o = ci(r), a = o ? h.findOne(o) : null;\n            if (a) {\n                const l = a.getBoundingClientRect();\n                if (l.width || l.height) return [\n                    E[e](a).top + s,\n                    o\n                ];\n            }\n            return null;\n        }).filter((r)=>r).sort((r, o)=>r[0] - o[0]).forEach((r)=>{\n            this._offsets.push(r[0]), this._targets.push(r[1]);\n        });\n    }\n    dispose() {\n        d.off(this._scrollElement, Ci), d.off(this._scrollElement, Ke), super.dispose();\n    }\n    // Private\n    _getConfig(t) {\n        return t = {\n            ..._s,\n            ...E.getDataAttributes(this._element),\n            ...typeof t == \"object\" && t ? t : {}\n        }, t.target = rt(t.target) || document.documentElement, R(Ye, t, Xa), t;\n    }\n    _getClasses(t) {\n        const e = E.getDataClassAttributes(this._element);\n        return t = {\n            ...Ga,\n            ...e,\n            ...t\n        }, R(Ye, t, Qa), t;\n    }\n    _getScrollTop() {\n        return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n    }\n    _getScrollHeight() {\n        return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n    }\n    _getOffsetHeight() {\n        return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n    }\n    _process() {\n        const t = this._getScrollTop() + this._config.offset, e = this._getScrollHeight(), s = this._config.offset + e - this._getOffsetHeight();\n        if (this._scrollHeight !== e && this.refresh(), t >= s) {\n            const n = this._targets[this._targets.length - 1];\n            this._activeTarget !== n && this._activate(n);\n            return;\n        }\n        if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0) {\n            this._activeTarget = null, this._clear();\n            return;\n        }\n        for(let n = this._offsets.length; n--;)this._activeTarget !== this._targets[n] && t >= this._offsets[n] && (typeof this._offsets[n + 1] > \"u\" || t < this._offsets[n + 1]) && this._activate(this._targets[n]);\n    }\n    _activate(t) {\n        this._activeTarget = t, this._clear();\n        const e = ze.split(\",\").map((n)=>`${n}[data-twe-target=\"${t}\"],${n}[href=\"${t}\"]`), s = h.findOne(e.join(\",\"), this._config.target);\n        s.classList.add(...this._classes.active.split(\" \")), s.setAttribute(Kt, \"\"), s.getAttribute(Ln) ? h.findOne(il, s.closest(el)).classList.add(...this._classes.active.split(\" \")) : h.parents(s, Ja).forEach((n)=>{\n            h.prev(n, `${oi}, ${$n}`).forEach((r)=>{\n                r.classList.add(...this._classes.active.split(\" \")), r.setAttribute(Kt, \"\");\n            }), h.prev(n, tl).forEach((r)=>{\n                h.children(r, oi).forEach((o)=>o.classList.add(...this._classes.active.split(\" \")));\n            });\n        }), d.trigger(this._scrollElement, Ke, {\n            relatedTarget: t\n        });\n    }\n    _clear() {\n        h.find(ze, this._config.target).filter((t)=>t.classList.contains(...this._classes.active.split(\" \"))).forEach((t)=>{\n            t.classList.remove(...this._classes.active.split(\" \")), t.removeAttribute(Kt);\n        });\n    }\n    _hide(t) {\n        const e = h.findOne(qe, t.parentNode);\n        e.style.overflow = \"hidden\", e.style.height = \"0px\";\n    }\n    _show(t, e) {\n        t.style.height = e;\n    }\n    _getCollapsibles() {\n        const t = h.find(gs);\n        t && t.forEach((e)=>{\n            const s = e.parentNode, n = h.findOne(qe, s), r = n.offsetHeight || n.scrollHeight;\n            this._collapsibles.push({\n                element: n,\n                relatedTarget: e.getAttribute(\"href\"),\n                height: `${r}px`\n            });\n        });\n    }\n    _showSubsection() {\n        h.find(sl).filter((s)=>s.hasAttribute(Sn)).forEach((s)=>{\n            const n = h.findOne(qe, s.parentNode), r = this._collapsibles.find((o)=>o.relatedTarget = s.getAttribute(\"href\")).height;\n            this._show(n, r);\n        });\n    }\n    _hideSubsection() {\n        h.find(gs).filter((e)=>e.hasAttribute(Kt) === !1).forEach((e)=>{\n            this._hide(e);\n        });\n    }\n    _bindActivateEvent() {\n        d.on(this._element, Ke, ()=>{\n            this._showSubsection(), this._hideSubsection();\n        });\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = In.getOrCreateInstance(this, t);\n            if (typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t]();\n            }\n        });\n    }\n}\nconst Es = \"tab\", rl = \"twe.tab\", ye = `.${rl}`, ol = `hide${ye}`, al = `hidden${ye}`, ll = `show${ye}`, cl = `shown${ye}`, dl = \"data-twe-dropdown-menu-ref\", Ot = \"data-twe-tab-active\", ge = \"data-twe-nav-active\", ul = \"[data-twe-dropdown-ref]\", hl = \"[data-twe-nav-ref]\", vs = `[${Ot}]`, fl = `[${ge}]`, bs = \":scope > li > .active\", pl = \"[data-twe-dropdown-toggle-ref]\", _l = \":scope > [data-twe-dropdown-menu-ref] [data-twe-dropdown-show]\", gl = {\n    show: \"opacity-100\",\n    hide: \"opacity-0\"\n}, ml = {\n    show: \"string\",\n    hide: \"string\"\n};\nclass Rn extends tt {\n    constructor(t, e){\n        super(t), this._classes = this._getClasses(e);\n    }\n    // Getters\n    static get NAME() {\n        return Es;\n    }\n    // Public\n    show() {\n        if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.getAttribute(ge) === \"\") return;\n        let t;\n        const e = nt(this._element), s = this._element.closest(hl), n = h.findOne(fl, s);\n        if (s) {\n            const l = s.nodeName === \"UL\" || s.nodeName === \"OL\" ? bs : vs;\n            t = h.find(l, s), t = t[t.length - 1];\n        }\n        const r = t ? d.trigger(t, ol, {\n            relatedTarget: this._element\n        }) : null;\n        if (d.trigger(this._element, ll, {\n            relatedTarget: t\n        }).defaultPrevented || r !== null && r.defaultPrevented) return;\n        this._activate(this._element, s, null, n, this._element);\n        const a = ()=>{\n            d.trigger(t, al, {\n                relatedTarget: this._element\n            }), d.trigger(this._element, cl, {\n                relatedTarget: t\n            });\n        };\n        e ? this._activate(e, e.parentNode, a, n, this._element) : a();\n    }\n    // Private\n    _getClasses(t) {\n        const e = E.getDataClassAttributes(this._element);\n        return t = {\n            ...gl,\n            ...e,\n            ...t\n        }, R(Es, t, ml), t;\n    }\n    _activate(t, e, s, n, r) {\n        const a = (e && (e.nodeName === \"UL\" || e.nodeName === \"OL\") ? h.find(bs, e) : h.children(e, vs))[0], l = s && a && a.hasAttribute(Ot), u = ()=>this._transitionComplete(t, a, s, n, r);\n        a && l ? (E.removeClass(a, this._classes.show), E.addClass(a, this._classes.hide), this._queueCallback(u, t, !0)) : u();\n    }\n    _transitionComplete(t, e, s, n, r) {\n        if (e && n) {\n            e.removeAttribute(Ot), n.removeAttribute(ge);\n            const a = h.findOne(_l, e.parentNode);\n            a && a.removeAttribute(Ot), e.getAttribute(\"role\") === \"tab\" && e.setAttribute(\"aria-selected\", !1);\n        }\n        t.setAttribute(Ot, \"\"), r.setAttribute(ge, \"\"), t.getAttribute(\"role\") === \"tab\" && t.setAttribute(\"aria-selected\", !0), Xt(t), t.classList.contains(this._classes.hide) && (E.removeClass(t, this._classes.hide), E.addClass(t, this._classes.show));\n        let o = t.parentNode;\n        if (o && o.nodeName === \"LI\" && (o = o.parentNode), o && o.hasAttribute(dl)) {\n            const a = t.closest(ul);\n            a && h.find(pl, a).forEach((l)=>l.setAttribute(Ot, \"\")), t.setAttribute(\"aria-expanded\", !0);\n        }\n        s && s();\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = Rn.getOrCreateInstance(this);\n            if (typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t]();\n            }\n        });\n    }\n}\n(()=>{\n    var i = {\n        454: (s, n, r)=>{\n            r.d(n, {\n                Z: ()=>l\n            });\n            var o = r(645), a = r.n(o)()(function(u) {\n                return u[1];\n            });\n            a.push([\n                s.id,\n                \"INPUT:-webkit-autofill,SELECT:-webkit-autofill,TEXTAREA:-webkit-autofill{animation-name:onautofillstart}INPUT:not(:-webkit-autofill),SELECT:not(:-webkit-autofill),TEXTAREA:not(:-webkit-autofill){animation-name:onautofillcancel}@keyframes onautofillstart{}@keyframes onautofillcancel{}\",\n                \"\"\n            ]);\n            const l = a;\n        },\n        645: (s)=>{\n            s.exports = function(n) {\n                var r = [];\n                return r.toString = function() {\n                    return this.map(function(o) {\n                        var a = n(o);\n                        return o[2] ? \"@media \".concat(o[2], \" {\").concat(a, \"}\") : a;\n                    }).join(\"\");\n                }, r.i = function(o, a, l) {\n                    typeof o == \"string\" && (o = [\n                        [\n                            null,\n                            o,\n                            \"\"\n                        ]\n                    ]);\n                    var u = {};\n                    if (l) for(var c = 0; c < this.length; c++){\n                        var f = this[c][0];\n                        f != null && (u[f] = !0);\n                    }\n                    for(var v = 0; v < o.length; v++){\n                        var g = [].concat(o[v]);\n                        l && u[g[0]] || (a && (g[2] ? g[2] = \"\".concat(a, \" and \").concat(g[2]) : g[2] = a), r.push(g));\n                    }\n                }, r;\n            };\n        },\n        810: ()=>{\n            (function() {\n                if (false) { var n, s; }\n            })();\n        },\n        379: (s, n, r)=>{\n            var o, a = function() {\n                var m = {};\n                return function(p) {\n                    if (m[p] === void 0) {\n                        var _ = document.querySelector(p);\n                        if (window.HTMLIFrameElement && _ instanceof window.HTMLIFrameElement) try {\n                            _ = _.contentDocument.head;\n                        } catch  {\n                            _ = null;\n                        }\n                        m[p] = _;\n                    }\n                    return m[p];\n                };\n            }(), l = [];\n            function u(m) {\n                for(var p = -1, _ = 0; _ < l.length; _++)if (l[_].identifier === m) {\n                    p = _;\n                    break;\n                }\n                return p;\n            }\n            function c(m, p) {\n                for(var _ = {}, b = [], w = 0; w < m.length; w++){\n                    var C = m[w], y = p.base ? C[0] + p.base : C[0], N = _[y] || 0, S = \"\".concat(y, \" \").concat(N);\n                    _[y] = N + 1;\n                    var x = u(S), I = {\n                        css: C[1],\n                        media: C[2],\n                        sourceMap: C[3]\n                    };\n                    x !== -1 ? (l[x].references++, l[x].updater(I)) : l.push({\n                        identifier: S,\n                        updater: L(I, p),\n                        references: 1\n                    }), b.push(S);\n                }\n                return b;\n            }\n            function f(m) {\n                var p = document.createElement(\"style\"), _ = m.attributes || {};\n                if (_.nonce === void 0) {\n                    var b = r.nc;\n                    b && (_.nonce = b);\n                }\n                if (Object.keys(_).forEach(function(C) {\n                    p.setAttribute(C, _[C]);\n                }), typeof m.insert == \"function\") m.insert(p);\n                else {\n                    var w = a(m.insert || \"head\");\n                    if (!w) throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n                    w.appendChild(p);\n                }\n                return p;\n            }\n            var v, g = (v = [], function(m, p) {\n                return v[m] = p, v.filter(Boolean).join(`\n`);\n            });\n            function O(m, p, _, b) {\n                var w = _ ? \"\" : b.media ? \"@media \".concat(b.media, \" {\").concat(b.css, \"}\") : b.css;\n                if (m.styleSheet) m.styleSheet.cssText = g(p, w);\n                else {\n                    var C = document.createTextNode(w), y = m.childNodes;\n                    y[p] && m.removeChild(y[p]), y.length ? m.insertBefore(C, y[p]) : m.appendChild(C);\n                }\n            }\n            function T(m, p, _) {\n                var b = _.css, w = _.media, C = _.sourceMap;\n                if (w ? m.setAttribute(\"media\", w) : m.removeAttribute(\"media\"), C && typeof btoa < \"u\" && (b += `\n/*# sourceMappingURL=data:application/json;base64,`.concat(btoa(unescape(encodeURIComponent(JSON.stringify(C)))), \" */\")), m.styleSheet) m.styleSheet.cssText = b;\n                else {\n                    for(; m.firstChild;)m.removeChild(m.firstChild);\n                    m.appendChild(document.createTextNode(b));\n                }\n            }\n            var A = null, D = 0;\n            function L(m, p) {\n                var _, b, w;\n                if (p.singleton) {\n                    var C = D++;\n                    _ = A || (A = f(p)), b = O.bind(null, _, C, !1), w = O.bind(null, _, C, !0);\n                } else _ = f(p), b = T.bind(null, _, p), w = function() {\n                    (function(y) {\n                        if (y.parentNode === null) return !1;\n                        y.parentNode.removeChild(y);\n                    })(_);\n                };\n                return b(m), function(y) {\n                    if (y) {\n                        if (y.css === m.css && y.media === m.media && y.sourceMap === m.sourceMap) return;\n                        b(m = y);\n                    } else w();\n                };\n            }\n            s.exports = function(m, p) {\n                (p = p || {}).singleton || typeof p.singleton == \"boolean\" || (p.singleton = (o === void 0 && (o = !!(window && document && document.all && !window.atob)), o));\n                var _ = c(m = m || [], p);\n                return function(b) {\n                    if (b = b || [], Object.prototype.toString.call(b) === \"[object Array]\") {\n                        for(var w = 0; w < _.length; w++){\n                            var C = u(_[w]);\n                            l[C].references--;\n                        }\n                        for(var y = c(b, p), N = 0; N < _.length; N++){\n                            var S = u(_[N]);\n                            l[S].references === 0 && (l[S].updater(), l.splice(S, 1));\n                        }\n                        _ = y;\n                    }\n                };\n            };\n        }\n    }, t = {};\n    function e(s) {\n        var n = t[s];\n        if (n !== void 0) return n.exports;\n        var r = t[s] = {\n            id: s,\n            exports: {}\n        };\n        return i[s](r, r.exports, e), r.exports;\n    }\n    e.n = (s)=>{\n        var n = s && s.__esModule ? ()=>s.default : ()=>s;\n        return e.d(n, {\n            a: n\n        }), n;\n    }, e.d = (s, n)=>{\n        for(var r in n)e.o(n, r) && !e.o(s, r) && Object.defineProperty(s, r, {\n            enumerable: !0,\n            get: n[r]\n        });\n    }, e.o = (s, n)=>Object.prototype.hasOwnProperty.call(s, n), (()=>{\n        var s = e(379), n = e.n(s), r = e(454);\n        function o(l) {\n            if (!l.hasAttribute(\"autocompleted\")) {\n                l.setAttribute(\"autocompleted\", \"\");\n                var u = new window.CustomEvent(\"onautocomplete\", {\n                    bubbles: !0,\n                    cancelable: !0,\n                    detail: null\n                });\n                l.dispatchEvent(u) || (l.value = \"\");\n            }\n        }\n        function a(l) {\n            l.hasAttribute(\"autocompleted\") && (l.removeAttribute(\"autocompleted\"), l.dispatchEvent(new window.CustomEvent(\"onautocomplete\", {\n                bubbles: !0,\n                cancelable: !1,\n                detail: null\n            })));\n        }\n        n()(r.Z, {\n            insert: \"head\",\n            singleton: !1\n        }), r.Z.locals, e(810), document.addEventListener(\"animationstart\", function(l) {\n            l.animationName === \"onautofillstart\" ? o(l.target) : a(l.target);\n        }, !0), document.addEventListener(\"input\", function(l) {\n            l.inputType !== \"insertReplacementText\" && \"data\" in l ? a(l.target) : o(l.target);\n        }, !0);\n    })();\n})();\nconst Xe = \"input\", oe = \"twe.input\", xn = \"data-twe-input-wrapper-init\", kn = \"data-twe-input-notch-ref\", Pn = \"data-twe-input-notch-leading-ref\", Mn = \"data-twe-input-notch-middle-ref\", El = \"data-twe-input-notch-trailing-ref\", vl = \"data-twe-input-helper-ref\", bl = \"data-twe-input-placeholder-active\", st = \"data-twe-input-state-active\", ws = \"data-twe-input-focused\", Ts = \"data-twe-input-form-counter\", ae = `[${xn}] input`, le = `[${xn}] textarea`, yt = `[${kn}]`, ys = `[${Pn}]`, As = `[${Mn}]`, wl = `[${vl}]`, Tl = {\n    inputFormWhite: !1\n}, yl = {\n    inputFormWhite: \"(boolean)\"\n}, Al = {\n    notch: \"group flex absolute left-0 top-0 w-full max-w-full h-full text-left pointer-events-none\",\n    notchLeading: \"pointer-events-none border border-solid box-border bg-transparent transition-all duration-200 ease-linear motion-reduce:transition-none left-0 top-0 h-full w-2 border-e-0 rounded-s-[0.25rem] group-data-[twe-input-focused]:border-e-0 group-data-[twe-input-state-active]:border-e-0\",\n    notchLeadingNormal: \"border-secondary-500 dark:border-neutral-400 group-data-[twe-input-focused]:shadow-notch-1 group-data-[twe-input-focused]:border-primary\",\n    notchLeadingWhite: \"border-neutral-200 group-data-[twe-input-focused]:shadow-notch-1 group-data-[twe-input-focused]:shadow-white group-data-[twe-input-focused]:border-white\",\n    notchMiddle: \"pointer-events-none border border-solid box-border bg-transparent transition-all duration-200 ease-linear motion-reduce:transition-none grow-0 shrink-0 basis-auto w-auto max-w-[calc(100%-1rem)] h-full border-e-0 border-s-0 group-data-[twe-input-focused]:border-x-0 group-data-[twe-input-state-active]:border-x-0 group-data-[twe-input-focused]:border-t group-data-[twe-input-state-active]:border-t group-data-[twe-input-focused]:border-solid group-data-[twe-input-state-active]:border-solid group-data-[twe-input-focused]:border-t-transparent group-data-[twe-input-state-active]:border-t-transparent\",\n    notchMiddleNormal: \"border-secondary-500 dark:border-neutral-400 group-data-[twe-input-focused]:shadow-notch-2 group-data-[twe-input-focused]:border-primary\",\n    notchMiddleWhite: \"border-neutral-200 group-data-[twe-input-focused]:shadow-notch-2 group-data-[twe-input-focused]:shadow-white group-data-[twe-input-focused]:border-white\",\n    notchTrailing: \"pointer-events-none border border-solid box-border bg-transparent transition-all duration-200 ease-linear motion-reduce:transition-none grow h-full border-s-0 rounded-e-[0.25rem] group-data-[twe-input-focused]:border-s-0 group-data-[twe-input-state-active]:border-s-0\",\n    notchTrailingNormal: \"border-secondary-500 dark:border-neutral-400 group-data-[twe-input-focused]:shadow-notch-3 group-data-[twe-input-focused]:border-primary\",\n    notchTrailingWhite: \"border-neutral-200 group-data-[twe-input-focused]:shadow-notch-3 group-data-[twe-input-focused]:shadow-white group-data-[twe-input-focused]:border-white\",\n    counter: \"text-right leading-[1.6]\"\n}, Cl = {\n    notch: \"string\",\n    notchLeading: \"string\",\n    notchLeadingNormal: \"string\",\n    notchLeadingWhite: \"string\",\n    notchMiddle: \"string\",\n    notchMiddleNormal: \"string\",\n    notchMiddleWhite: \"string\",\n    notchTrailing: \"string\",\n    notchTrailingNormal: \"string\",\n    notchTrailingWhite: \"string\",\n    counter: \"string\"\n};\nclass $ {\n    constructor(t, e, s){\n        this._config = this._getConfig(e, t), this._element = t, this._classes = this._getClasses(s), this._label = null, this._labelWidth = 0, this._labelMarginLeft = 0, this._notchLeading = null, this._notchMiddle = null, this._notchTrailing = null, this._initiated = !1, this._helper = null, this._counter = !1, this._counterElement = null, this._maxLength = 0, this._leadingIcon = null, this._element && (V.setData(t, oe, this), this.init());\n    }\n    // Getters\n    static get NAME() {\n        return Xe;\n    }\n    get input() {\n        return h.findOne(\"input\", this._element) || h.findOne(\"textarea\", this._element);\n    }\n    // Public\n    init() {\n        this._initiated || (this._getLabelData(), this._applyDivs(), this._applyNotch(), this._activate(), this._getHelper(), this._getCounter(), this._getEvents(), this._initiated = !0);\n    }\n    update() {\n        this._getLabelData(), this._getNotchData(), this._applyNotch(), this._activate(), this._getHelper(), this._getCounter();\n    }\n    forceActive() {\n        this.input.setAttribute(st, \"\"), h.findOne(yt, this.input.parentNode).setAttribute(st, \"\");\n    }\n    forceInactive() {\n        this.input.removeAttribute(st), h.findOne(yt, this.input.parentNode).removeAttribute(st);\n    }\n    dispose() {\n        this._removeBorder(), V.removeData(this._element, oe), this._element = null;\n    }\n    // Private\n    _getConfig(t, e) {\n        return t = {\n            ...Tl,\n            ...E.getDataAttributes(e),\n            ...typeof t == \"object\" ? t : {}\n        }, R(Xe, t, yl), t;\n    }\n    _getClasses(t) {\n        const e = E.getDataClassAttributes(this._element);\n        return t = {\n            ...Al,\n            ...e,\n            ...t\n        }, R(Xe, t, Cl), t;\n    }\n    _getLabelData() {\n        this._label = h.findOne(\"label\", this._element), this._label === null ? this._showPlaceholder() : (this._getLabelWidth(), this._getLabelPositionInInputGroup(), this._toggleDefaultDatePlaceholder());\n    }\n    _getHelper() {\n        this._helper = h.findOne(wl, this._element);\n    }\n    _getCounter() {\n        this._counter = E.getDataAttribute(this.input, \"inputShowcounter\"), this._counter && (this._maxLength = this.input.maxLength, this._showCounter());\n    }\n    _getEvents() {\n        d.on(this._element, \"focus\", \"input\", $.activate(new $())), d.on(this._element, \"input\", \"input\", $.activate(new $())), d.on(this._element, \"blur\", \"input\", $.deactivate(new $())), d.on(this._element, \"focus\", \"textarea\", $.activate(new $())), d.on(this._element, \"input\", \"textarea\", $.activate(new $())), d.on(this._element, \"blur\", \"textarea\", $.deactivate(new $())), d.on(window, \"shown.twe.modal\", (t)=>{\n            h.find(ae, t.target).forEach((e)=>{\n                const s = $.getInstance(e.parentNode);\n                s && s.update();\n            }), h.find(le, t.target).forEach((e)=>{\n                const s = $.getInstance(e.parentNode);\n                s && s.update();\n            });\n        }), d.on(window, \"shown.twe.dropdown\", (t)=>{\n            const e = t.target.parentNode.querySelector(\"[data-twe-dropdown-menu-ref]\");\n            e && (h.find(ae, e).forEach((s)=>{\n                const n = $.getInstance(s.parentNode);\n                n && n.update();\n            }), h.find(le, e).forEach((s)=>{\n                const n = $.getInstance(s.parentNode);\n                n && n.update();\n            }));\n        }), d.on(window, \"shown.twe.tab\", (t)=>{\n            let e;\n            t.target.href ? e = t.target.href.split(\"#\")[1] : e = E.getDataAttribute(t.target, \"target\").split(\"#\")[1];\n            const s = h.findOne(`#${e}`);\n            h.find(ae, s).forEach((n)=>{\n                const r = $.getInstance(n.parentNode);\n                r && r.update();\n            }), h.find(le, s).forEach((n)=>{\n                const r = $.getInstance(n.parentNode);\n                r && r.update();\n            });\n        }), d.on(window, \"reset\", (t)=>{\n            h.find(ae, t.target).forEach((e)=>{\n                const s = $.getInstance(e.parentNode);\n                s && s.forceInactive();\n            }), h.find(le, t.target).forEach((e)=>{\n                const s = $.getInstance(e.parentNode);\n                s && s.forceInactive();\n            });\n        }), d.on(window, \"onautocomplete\", (t)=>{\n            const e = $.getInstance(t.target.parentNode);\n            !e || !t.cancelable || e.forceActive();\n        });\n    }\n    _showCounter() {\n        if (h.find(`[${Ts}]`, this._element).length > 0) return;\n        this._counterElement = document.createElement(\"div\"), E.addClass(this._counterElement, this._classes.counter), this._counterElement.setAttribute(Ts, \"\");\n        const e = this.input.value.length;\n        this._counterElement.innerHTML = `${e} / ${this._maxLength}`, this._helper.appendChild(this._counterElement), this._bindCounter();\n    }\n    _bindCounter() {\n        d.on(this.input, \"input\", ()=>{\n            const t = this.input.value.length;\n            this._counterElement.innerHTML = `${t} / ${this._maxLength}`;\n        });\n    }\n    _toggleDefaultDatePlaceholder(t = this.input) {\n        if (!(t.getAttribute(\"type\") === \"date\")) return;\n        !(document.activeElement === t) && !t.value ? t.style.opacity = 0 : t.style.opacity = 1;\n    }\n    _showPlaceholder() {\n        this.input.setAttribute(bl, \"\");\n    }\n    _getNotchData() {\n        this._notchMiddle = h.findOne(As, this._element), this._notchLeading = h.findOne(ys, this._element);\n    }\n    _getLabelWidth() {\n        this._labelWidth = this._label.clientWidth * 0.8 + 8;\n    }\n    _getLabelPositionInInputGroup() {\n        if (this._labelMarginLeft = 0, !this._element.hasAttribute(\"data-twe-input-group-ref\")) return;\n        const t = this.input, e = h.prev(t, \"[data-twe-input-group-text-ref]\")[0];\n        e === void 0 ? this._labelMarginLeft = 0 : this._labelMarginLeft = e.offsetWidth - 1;\n    }\n    _applyDivs() {\n        const t = this._config.inputFormWhite ? this._classes.notchLeadingWhite : this._classes.notchLeadingNormal, e = this._config.inputFormWhite ? this._classes.notchMiddleWhite : this._classes.notchMiddleNormal, s = this._config.inputFormWhite ? this._classes.notchTrailingWhite : this._classes.notchTrailingNormal, n = h.find(yt, this._element), r = Ft(\"div\");\n        E.addClass(r, this._classes.notch), r.setAttribute(kn, \"\"), this._notchLeading = Ft(\"div\"), E.addClass(this._notchLeading, `${this._classes.notchLeading} ${t}`), this._notchLeading.setAttribute(Pn, \"\"), this._notchMiddle = Ft(\"div\"), E.addClass(this._notchMiddle, `${this._classes.notchMiddle} ${e}`), this._notchMiddle.setAttribute(Mn, \"\"), this._notchTrailing = Ft(\"div\"), E.addClass(this._notchTrailing, `${this._classes.notchTrailing} ${s}`), this._notchTrailing.setAttribute(El, \"\"), !(n.length >= 1) && (r.append(this._notchLeading), r.append(this._notchMiddle), r.append(this._notchTrailing), this._element.append(r), r.dir = \"ltr\");\n    }\n    _applyNotch() {\n        this._notchMiddle.style.width = `${this._labelWidth}px`, this._notchLeading.style.width = `${this._labelMarginLeft + 9}px`, this._label !== null && (this._label.style.marginLeft = `${this._labelMarginLeft}px`);\n    }\n    _removeBorder() {\n        const t = h.findOne(yt, this._element);\n        t && t.remove();\n    }\n    _activate(t) {\n        Vs(()=>{\n            this._getElements(t);\n            const e = t ? t.target : this.input, s = h.findOne(yt, this._element);\n            t && t.type === \"focus\" && s && s.setAttribute(ws, \"\"), e.value !== \"\" && (e.setAttribute(st, \"\"), s && s.setAttribute(st, \"\")), this._toggleDefaultDatePlaceholder(e);\n        });\n    }\n    _getElements(t) {\n        if (t && (this._element = t.target.parentNode, this._label = h.findOne(\"label\", this._element)), t && this._label) {\n            const e = this._labelWidth;\n            this._getLabelData(), e !== this._labelWidth && (this._notchMiddle = h.findOne(As, t.target.parentNode), this._notchLeading = h.findOne(ys, t.target.parentNode), this._applyNotch());\n        }\n    }\n    _deactivate(t) {\n        const e = t ? t.target : this.input;\n        if (e.getAttribute(\"aria-expanded\") === \"true\") return;\n        const s = h.findOne(yt, e.parentNode);\n        s.removeAttribute(ws), e.value === \"\" && (e.removeAttribute(st), s.removeAttribute(st)), this._toggleDefaultDatePlaceholder(e);\n    }\n    static activate(t) {\n        return function(e) {\n            t._activate(e);\n        };\n    }\n    static deactivate(t) {\n        return function(e) {\n            t._deactivate(e);\n        };\n    }\n    static jQueryInterface(t, e) {\n        return this.each(function() {\n            let s = V.getData(this, oe);\n            const n = typeof t == \"object\" && t;\n            if (!(!s && /dispose/.test(t)) && (s || (s = new $(this, n)), typeof t == \"string\")) {\n                if (typeof s[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                s[t](e);\n            }\n        });\n    }\n    static getInstance(t) {\n        return V.getData(t, oe);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst Ol = {\n    property: \"color\",\n    defaultValue: null,\n    inherit: !0\n}, At = (i, t)=>{\n    const { property: e, defaultValue: s, inherit: n } = {\n        ...Ol,\n        ...t\n    }, r = document.createElement(\"div\");\n    r.classList.add(i), document.body.appendChild(r);\n    const a = window.getComputedStyle(r)[e] || s, u = window.getComputedStyle(r.parentElement)[e];\n    return document.body.removeChild(r), !n && u && a === u ? s : a || s;\n}, Ge = \"ripple\", ce = \"twe.ripple\", Dl = \"rgba({{color}}, 0.2) 0, rgba({{color}}, 0.3) 40%, rgba({{color}}, 0.4) 50%, rgba({{color}}, 0.5) 60%, rgba({{color}}, 0) 70%\", Nl = [\n    \"[data-twe-ripple-init]\"\n], de = [\n    0,\n    0,\n    0\n], Sl = [\n    {\n        name: \"primary\",\n        gradientColor: At(\"text-primary\", {\n            defaultValue: \"#3B71CA\",\n            inherit: !1\n        })\n    },\n    {\n        name: \"secondary\",\n        gradientColor: At(\"text-primary-100\", {\n            defaultValue: \"#9FA6B2\",\n            inherit: !1\n        })\n    },\n    {\n        name: \"success\",\n        gradientColor: At(\"text-success\", {\n            defaultValue: \"#14A44D\",\n            inherit: !1\n        })\n    },\n    {\n        name: \"danger\",\n        gradientColor: At(\"text-danger\", {\n            defaultValue: \"#DC4C64\",\n            inherit: !1\n        })\n    },\n    {\n        name: \"warning\",\n        gradientColor: At(\"text-warning\", {\n            defaultValue: \"#E4A11B\",\n            inherit: !1\n        })\n    },\n    {\n        name: \"info\",\n        gradientColor: At(\"text-info\", {\n            defaultValue: \"#54B4D3\",\n            inherit: !1\n        })\n    },\n    {\n        name: \"light\",\n        gradientColor: \"#fbfbfb\"\n    },\n    {\n        name: \"dark\",\n        gradientColor: \"#262626\"\n    }\n], Cs = 0.5, Ll = {\n    rippleCentered: !1,\n    rippleColor: \"\",\n    rippleColorDark: \"\",\n    rippleDuration: \"500ms\",\n    rippleRadius: 0,\n    rippleUnbound: !1\n}, $l = {\n    rippleCentered: \"boolean\",\n    rippleColor: \"string\",\n    rippleColorDark: \"string\",\n    rippleDuration: \"string\",\n    rippleRadius: \"number\",\n    rippleUnbound: \"boolean\"\n}, Il = {\n    ripple: \"relative overflow-hidden inline-block align-bottom\",\n    rippleWave: \"rounded-[50%] opacity-50 pointer-events-none absolute touch-none scale-0 transition-[transform,_opacity] ease-[cubic-bezier(0,0,0.15,1),_cubic-bezier(0,0,0.15,1)] z-[999]\",\n    unbound: \"overflow-visible\"\n}, Rl = {\n    ripple: \"string\",\n    rippleWave: \"string\",\n    unbound: \"string\"\n};\nclass Hn {\n    constructor(t, e, s){\n        this._element = t, this._options = this._getConfig(e), this._classes = this._getClasses(s), this._currentColor = this._options.rippleColor, this._element && (V.setData(t, ce, this), E.addClass(this._element, this._classes.ripple)), this._clickHandler = this._createRipple.bind(this), this._rippleTimer = null, this._isMinWidthSet = !1, this._initialClasses = null, this.init();\n    }\n    // Getters\n    static get NAME() {\n        return Ge;\n    }\n    // Public\n    init() {\n        this._addClickEvent(this._element);\n    }\n    dispose() {\n        V.removeData(this._element, ce), d.off(this._element, \"mousedown\", this._clickHandler), this._element = null, this._options = null;\n    }\n    // Private\n    _autoInit(t) {\n        Nl.forEach((e)=>{\n            h.closest(t.target, e) && (this._element = h.closest(t.target, e));\n        }), this._element.style.minWidth || (E.style(this._element, {\n            \"min-width\": getComputedStyle(this._element).width\n        }), this._isMinWidthSet = !0), this._options = this._getConfig(), this._classes = this._getClasses(), this._initialClasses = [\n            ...this._element.classList\n        ], E.addClass(this._element, this._classes.ripple), this._createRipple(t);\n    }\n    _addClickEvent(t) {\n        d.on(t, \"mousedown\", this._clickHandler);\n    }\n    _createRipple(t) {\n        this._element.className.indexOf(this._classes.ripple) < 0 && E.addClass(this._element, this._classes.ripple);\n        const { layerX: e, layerY: s } = t, n = t.offsetX || e, r = t.offsetY || s, o = this._element.offsetHeight, a = this._element.offsetWidth, l = this._durationToMsNumber(this._options.rippleDuration), u = {\n            offsetX: this._options.rippleCentered ? o / 2 : n,\n            offsetY: this._options.rippleCentered ? a / 2 : r,\n            height: o,\n            width: a\n        }, c = this._getDiameter(u), f = this._options.rippleRadius || c / 2, v = {\n            delay: l * Cs,\n            duration: l - l * Cs\n        }, g = {\n            left: this._options.rippleCentered ? `${a / 2 - f}px` : `${n - f}px`,\n            top: this._options.rippleCentered ? `${o / 2 - f}px` : `${r - f}px`,\n            height: `${this._options.rippleRadius * 2 || c}px`,\n            width: `${this._options.rippleRadius * 2 || c}px`,\n            transitionDelay: `0s, ${v.delay}ms`,\n            transitionDuration: `${l}ms, ${v.duration}ms`\n        }, O = Ft(\"div\");\n        this._createHTMLRipple({\n            wrapper: this._element,\n            ripple: O,\n            styles: g\n        }), this._removeHTMLRipple({\n            ripple: O,\n            duration: l\n        });\n    }\n    _createHTMLRipple({ wrapper: t, ripple: e, styles: s }) {\n        Object.keys(s).forEach((n)=>e.style[n] = s[n]), E.addClass(e, this._classes.rippleWave), e.setAttribute(\"data-twe-ripple-ref\", \"\"), this._addColor(e, t), this._toggleUnbound(t), this._appendRipple(e, t);\n    }\n    _removeHTMLRipple({ ripple: t, duration: e }) {\n        this._rippleTimer && (clearTimeout(this._rippleTimer), this._rippleTimer = null), t && setTimeout(()=>{\n            t.classList.add(\"!opacity-0\");\n        }, 10), this._rippleTimer = setTimeout(()=>{\n            if (t && (t.remove(), this._element)) {\n                h.find(\"[data-twe-ripple-ref]\", this._element).forEach((n)=>{\n                    n.remove();\n                }), this._isMinWidthSet && (E.style(this._element, {\n                    \"min-width\": \"\"\n                }), this._isMinWidthSet = !1);\n                const s = this._initialClasses ? this._addedNewRippleClasses(this._classes.ripple, this._initialClasses) : this._classes.ripple.split(\" \");\n                E.removeClass(this._element, s);\n            }\n        }, e);\n    }\n    _addedNewRippleClasses(t, e) {\n        return t.split(\" \").filter((s)=>e.findIndex((n)=>s === n) === -1);\n    }\n    _durationToMsNumber(t) {\n        return Number(t.replace(\"ms\", \"\").replace(\"s\", \"000\"));\n    }\n    _getConfig(t = {}) {\n        const e = E.getDataAttributes(this._element);\n        return t = {\n            ...Ll,\n            ...e,\n            ...t\n        }, R(Ge, t, $l), t;\n    }\n    _getClasses(t = {}) {\n        const e = E.getDataClassAttributes(this._element);\n        return t = {\n            ...Il,\n            ...e,\n            ...t\n        }, R(Ge, t, Rl), t;\n    }\n    _getDiameter({ offsetX: t, offsetY: e, height: s, width: n }) {\n        const r = e <= s / 2, o = t <= n / 2, a = (v, g)=>Math.sqrt(v ** 2 + g ** 2), l = e === s / 2 && t === n / 2, u = {\n            first: r === !0 && o === !1,\n            second: r === !0 && o === !0,\n            third: r === !1 && o === !0,\n            fourth: r === !1 && o === !1\n        }, c = {\n            topLeft: a(t, e),\n            topRight: a(n - t, e),\n            bottomLeft: a(t, s - e),\n            bottomRight: a(n - t, s - e)\n        };\n        let f = 0;\n        return l || u.fourth ? f = c.topLeft : u.third ? f = c.topRight : u.second ? f = c.bottomRight : u.first && (f = c.bottomLeft), f * 2;\n    }\n    _appendRipple(t, e) {\n        e.appendChild(t), setTimeout(()=>{\n            E.addClass(t, \"opacity-0 scale-100\");\n        }, 50);\n    }\n    _toggleUnbound(t) {\n        this._options.rippleUnbound === !0 ? E.addClass(t, this._classes.unbound) : E.removeClass(t, this._classes.unbound);\n    }\n    _addColor(t) {\n        let e = this._options.rippleColor || \"rgb(0,0,0)\";\n        (localStorage.theme === \"dark\" || !(\"theme\" in localStorage) && window.matchMedia(\"(prefers-color-scheme: dark)\").matches) && (e = this._options.rippleColorDark || this._options.rippleColor);\n        const s = Sl.find((o)=>o.name === e.toLowerCase()), n = s ? this._colorToRGB(s.gradientColor).join(\",\") : this._colorToRGB(e).join(\",\"), r = Dl.split(\"{{color}}\").join(`${n}`);\n        t.style.backgroundImage = `radial-gradient(circle, ${r})`;\n    }\n    _colorToRGB(t) {\n        function e(r) {\n            return r.length < 7 && (r = `#${r[1]}${r[1]}${r[2]}${r[2]}${r[3]}${r[3]}`), [\n                parseInt(r.substr(1, 2), 16),\n                parseInt(r.substr(3, 2), 16),\n                parseInt(r.substr(5, 2), 16)\n            ];\n        }\n        function s(r) {\n            const o = document.body.appendChild(document.createElement(\"fictum\")), a = \"rgb(1, 2, 3)\";\n            return o.style.color = a, o.style.color !== a || (o.style.color = r, o.style.color === a || o.style.color === \"\") ? de : (r = getComputedStyle(o).color, document.body.removeChild(o), r);\n        }\n        function n(r) {\n            return r = r.match(/[.\\d]+/g).map((o)=>+Number(o)), r.length = 3, r;\n        }\n        return t.toLowerCase() === \"transparent\" ? de : t[0] === \"#\" ? e(t) : (t.indexOf(\"rgb\") === -1 && (t = s(t)), t.indexOf(\"rgb\") === 0 ? n(t) : de);\n    }\n    // Static\n    static autoInitial(t) {\n        return function(e) {\n            t._autoInit(e);\n        };\n    }\n    static jQueryInterface(t) {\n        return this.each(function() {\n            return V.getData(this, ce) ? null : new Hn(this, t);\n        });\n    }\n    static getInstance(t) {\n        return V.getData(t, ce);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst Qe = \"modal\", xl = \"twe.modal\", K = `.${xl}`, Os = \"Escape\", Ds = {\n    backdrop: !0,\n    keyboard: !0,\n    focus: !0\n}, Ns = {\n    backdrop: \"(boolean|string)\",\n    keyboard: \"boolean\",\n    focus: \"boolean\"\n}, kl = {\n    show: \"transform-none\",\n    static: \"scale-[1.02]\",\n    staticProperties: \"transition-scale duration-300 ease-in-out\",\n    backdrop: \"opacity-50 transition-all duration-300 ease-in-out fixed top-0 left-0 z-[1040] bg-black w-screen h-screen\"\n}, Pl = {\n    show: \"string\",\n    static: \"string\",\n    staticProperties: \"string\",\n    backdrop: \"string\"\n}, Ml = `hide${K}`, Hl = `hidePrevented${K}`, Vl = `hidden${K}`, Wl = `show${K}`, Bl = `shown${K}`, Ss = `resize${K}`, Ls = `click.dismiss${K}`, $s = `keydown.dismiss${K}`, jl = `mouseup.dismiss${K}`, Is = `mousedown.dismiss${K}`, Rs = \"data-twe-modal-open\", xs = \"data-twe-open\", Ut = \"[data-twe-modal-dialog-ref]\", Ul = \"[data-twe-modal-body-ref]\";\nclass ai extends tt {\n    constructor(t, e, s){\n        super(t), this._config = this._getConfig(e), this._classes = this._getClasses(s), this._backdrop = this._initializeBackDrop(), this._focustrap = this._initializeFocusTrap(), this._scrollBar = new ri(), this._dialog = h.findOne(Ut, this._element), this._isShown = !1, this._ignoreBackdropClick = !1, this._isTransitioning = !1, this._didInit = !1, this._init();\n    }\n    // Getters\n    static get NAME() {\n        return Qe;\n    }\n    static get Default() {\n        return Ds;\n    }\n    static get getDefaultType() {\n        return Ns;\n    }\n    // Public\n    toggle(t) {\n        return this._isShown ? this.hide() : this.show(t);\n    }\n    show(t) {\n        this._isShown || this._isTransitioning || d.trigger(this._element, Wl, {\n            relatedTarget: t\n        }).defaultPrevented || (this._isShown = !0, this._isAnimated() && (this._isTransitioning = !0), this._scrollBar.hide(), document.body.setAttribute(Rs, \"true\"), this._adjustDialog(), this._setEscapeEvent(), this._setResizeEvent(), d.on(this._dialog, Is, ()=>{\n            d.one(this._element, jl, (s)=>{\n                s.target === this._element && (this._ignoreBackdropClick = !0);\n            });\n        }), this._showElement(t), this._showBackdrop());\n    }\n    hide() {\n        if (!this._isShown || this._isTransitioning || d.trigger(this._element, Ml).defaultPrevented) return;\n        this._isShown = !1;\n        const e = this._isAnimated();\n        e && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), this._focustrap.disable(), h.findOne(Ut, this._element).classList.remove(this._classes.show), d.off(this._element, Ls), d.off(this._dialog, Is), this._queueCallback(()=>this._hideModal(), this._element, e), this._element.removeAttribute(xs);\n    }\n    dispose() {\n        [\n            window,\n            document,\n            this._dialog\n        ].forEach((t)=>d.off(t, K)), this._backdrop.dispose(), this._focustrap.disable(), super.dispose();\n    }\n    handleUpdate() {\n        this._adjustDialog();\n    }\n    // Private\n    _init() {\n        this._didInit || (Cn(ai), this._didInit = !0);\n    }\n    _initializeBackDrop() {\n        return new yn({\n            isVisible: !!this._config.backdrop,\n            // 'static' option will be translated to true, and booleans will keep their value\n            isAnimated: this._isAnimated(),\n            backdropClasses: this._classes.backdrop\n        });\n    }\n    _initializeFocusTrap() {\n        return new An(this._element, {\n            event: \"keydown\",\n            condition: (t)=>t.key === \"Tab\"\n        });\n    }\n    _showElement(t) {\n        const e = this._isAnimated(), s = h.findOne(Ul, this._dialog);\n        (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) && document.body.append(this._element), this._element.style.display = \"block\", this._element.classList.remove(\"hidden\"), this._element.removeAttribute(\"aria-hidden\"), this._element.setAttribute(\"aria-modal\", !0), this._element.setAttribute(\"role\", \"dialog\"), this._element.setAttribute(`${xs}`, \"true\"), this._element.scrollTop = 0;\n        const n = h.findOne(Ut, this._element);\n        n.classList.add(this._classes.show), n.classList.remove(\"opacity-0\"), n.classList.add(\"opacity-100\"), s && (s.scrollTop = 0), e && Xt(this._element);\n        const r = ()=>{\n            this._config.focus && this._focustrap.trap(), this._isTransitioning = !1, d.trigger(this._element, Bl, {\n                relatedTarget: t\n            });\n        };\n        this._queueCallback(r, this._dialog, e);\n    }\n    _setEscapeEvent() {\n        this._isShown ? d.on(document, $s, (t)=>{\n            this._config.keyboard && t.key === Os ? (t.preventDefault(), this.hide()) : !this._config.keyboard && t.key === Os && this._triggerBackdropTransition();\n        }) : d.off(this._element, $s);\n    }\n    _setResizeEvent() {\n        this._isShown ? d.on(window, Ss, ()=>this._adjustDialog()) : d.off(window, Ss);\n    }\n    _hideModal() {\n        const t = h.findOne(Ut, this._element);\n        t.classList.remove(this._classes.show), t.classList.remove(\"opacity-100\"), t.classList.add(\"opacity-0\");\n        const e = Je(t);\n        setTimeout(()=>{\n            this._element.style.display = \"none\";\n        }, e), this._element.setAttribute(\"aria-hidden\", !0), this._element.removeAttribute(\"aria-modal\"), this._element.removeAttribute(\"role\"), this._isTransitioning = !1, this._backdrop.hide(()=>{\n            document.body.removeAttribute(Rs), this._resetAdjustments(), this._scrollBar.reset(), d.trigger(this._element, Vl);\n        });\n    }\n    _showBackdrop(t) {\n        d.on(this._element, Ls, (e)=>{\n            if (this._ignoreBackdropClick) {\n                this._ignoreBackdropClick = !1;\n                return;\n            }\n            e.target === e.currentTarget && (this._config.backdrop === !0 ? this.hide() : this._config.backdrop === \"static\" && this._triggerBackdropTransition());\n        }), this._backdrop.show(t);\n    }\n    _isAnimated() {\n        return !!h.findOne(Ut, this._element);\n    }\n    _triggerBackdropTransition() {\n        if (d.trigger(this._element, Hl).defaultPrevented) return;\n        const { classList: e, scrollHeight: s, style: n } = this._element, r = s > document.documentElement.clientHeight;\n        if (!r && n.overflowY === \"hidden\" || e.contains(this._classes.static)) return;\n        r || (n.overflowY = \"hidden\"), e.add(...this._classes.static.split(\" \")), e.add(...this._classes.staticProperties.split(\" \"));\n        const o = Je(this._element);\n        this._queueCallback(()=>{\n            e.remove(this._classes.static), setTimeout(()=>{\n                e.remove(...this._classes.staticProperties.split(\" \"));\n            }, o), r || this._queueCallback(()=>{\n                n.overflowY = \"\";\n            }, this._dialog);\n        }, this._dialog), this._element.focus();\n    }\n    _getConfig(t) {\n        return t = {\n            ...Ds,\n            ...E.getDataAttributes(this._element),\n            ...typeof t == \"object\" ? t : {}\n        }, R(Qe, t, Ns), t;\n    }\n    _getClasses(t) {\n        const e = E.getDataClassAttributes(this._element);\n        return t = {\n            ...kl,\n            ...e,\n            ...t\n        }, R(Qe, t, Pl), t;\n    }\n    // ----------------------------------------------------------------------\n    // the following methods are used to handle overflowing modals\n    // ----------------------------------------------------------------------\n    _adjustDialog() {\n        const t = this._element.scrollHeight > document.documentElement.clientHeight, e = this._scrollBar.getWidth(), s = e > 0;\n        (!s && t && !M() || s && !t && M()) && (this._element.style.paddingLeft = `${e}px`), (s && !t && !M() || !s && t && M()) && (this._element.style.paddingRight = `${e}px`);\n    }\n    _resetAdjustments() {\n        this._element.style.paddingLeft = \"\", this._element.style.paddingRight = \"\";\n    }\n    // Static\n    static jQueryInterface(t, e) {\n        return this.each(function() {\n            const s = ai.getOrCreateInstance(this, t);\n            if (typeof t == \"string\") {\n                if (typeof s[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                s[t](e);\n            }\n        });\n    }\n}\nconst Fl = (i, t)=>{\n    d.on(document, `click.twe.${i.NAME}`, t, function(e) {\n        e.preventDefault(), i.getOrCreateInstance(this).toggle();\n    });\n}, Yl = (i, t)=>{\n    d.on(document, `click.twe.${i.NAME}.data-api`, t, function(e) {\n        if ([\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName) && e.preventDefault(), gt(this)) return;\n        i.getOrCreateInstance(this).show();\n    });\n}, Kl = (i, t)=>{\n    d.on(document, `click.twe.${i.NAME}.data-api`, t, function(e) {\n        const s = nt(this);\n        if ([\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName) && e.preventDefault(), gt(this)) return;\n        d.one(s, i.EVENT_HIDDEN, ()=>{\n            kt(this) && this.focus();\n        });\n        const n = h.findOne(i.OPEN_SELECTOR);\n        n && n !== s && i.getInstance(n).hide(), i.getOrCreateInstance(s).toggle(this);\n    });\n}, zl = (i, t)=>{\n    d.on(document, `click.twe.${i.NAME}`, t, (e)=>{\n        e.preventDefault();\n        const s = e.target.closest(t);\n        i.getOrCreateInstance(s).toggle();\n    });\n}, ql = (i, t)=>{\n    d.one(document, \"mousedown\", t, i.autoInitial(new i()));\n}, Xl = (i, t)=>{\n    d.on(document, `click.twe.${i.NAME}.data-api`, t, function(e) {\n        (e.target.tagName === \"A\" || e.delegateTarget && e.delegateTarget.tagName === \"A\") && e.preventDefault();\n        const s = ci(this);\n        h.find(s).forEach((r)=>{\n            i.getOrCreateInstance(r, {\n                toggle: !1\n            }).toggle();\n        });\n    });\n}, Gl = (i, t)=>{\n    [].slice.call(document.querySelectorAll(t)).map(function(s) {\n        return new i(s);\n    });\n}, Ql = (i, t)=>{\n    [].slice.call(document.querySelectorAll(t)).map(function(s) {\n        return new i(s);\n    });\n}, Zl = (i, t)=>{\n    d.on(document, `click.twe.${i.NAME}`, t, function(e) {\n        const s = nt(this);\n        [\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName) && e.preventDefault(), d.one(s, i.EVENT_SHOW, (o)=>{\n            o.defaultPrevented || d.one(s, i.EVENT_HIDDEN, ()=>{\n                kt(this) && this.focus();\n            });\n        });\n        const n = h.findOne(`[${i.OPEN_SELECTOR}=\"true\"]`);\n        n && i.getInstance(n).hide(), i.getOrCreateInstance(s).toggle(this);\n    });\n}, Jl = {\n    carousel: {\n        name: \"Carousel\",\n        selector: \"[data-twe-carousel-init]\",\n        isToggler: !1\n    },\n    input: {\n        name: \"Input\",\n        selector: \"[data-twe-input-wrapper-init]\",\n        isToggler: !1\n    },\n    scrollspy: {\n        name: \"ScrollSpy\",\n        selector: \"[data-twe-spy='scroll']\",\n        isToggler: !1\n    },\n    // togglers\n    button: {\n        name: \"Button\",\n        selector: \"[data-twe-toggle='button']\",\n        isToggler: !0,\n        callback: zl\n    },\n    collapse: {\n        name: \"Collapse\",\n        selector: \"[data-twe-collapse-init]\",\n        isToggler: !0,\n        callback: Xl\n    },\n    dropdown: {\n        name: \"Dropdown\",\n        selector: \"[data-twe-dropdown-toggle-ref]\",\n        isToggler: !0,\n        callback: Fl\n    },\n    ripple: {\n        name: \"Ripple\",\n        selector: \"[data-twe-ripple-init]\",\n        isToggler: !0,\n        callback: ql\n    },\n    offcanvas: {\n        name: \"Offcanvas\",\n        selector: \"[data-twe-offcanvas-toggle]\",\n        isToggler: !0,\n        callback: Kl\n    },\n    tab: {\n        name: \"Tab\",\n        selector: \"[data-twe-toggle='tab'], [data-twe-toggle='pill'], [data-twe-toggle='list']\",\n        isToggler: !0,\n        callback: Yl\n    },\n    tooltip: {\n        name: \"Tooltip\",\n        selector: \"[data-twe-toggle='tooltip']\",\n        isToggler: !1,\n        callback: Gl\n    },\n    popover: {\n        name: \"Popover\",\n        selector: \"[data-twe-toggle='popover']\",\n        isToggler: !0,\n        callback: Ql\n    },\n    modal: {\n        name: \"Modal\",\n        selector: \"[data-twe-toggle='modal']\",\n        isToggler: !0,\n        callback: Zl\n    }\n}, tc = (i)=>{\n    Vs(()=>{\n        const t = Hs();\n        if (t) {\n            const e = i.NAME, s = t.fn[e];\n            t.fn[e] = i.jQueryInterface, t.fn[e].Constructor = i, t.fn[e].noConflict = ()=>(t.fn[e] = s, i.jQueryInterface);\n        }\n    });\n};\nclass ec {\n    constructor(){\n        this.inits = [];\n    }\n    get initialized() {\n        return this.inits;\n    }\n    isInited(t) {\n        return this.inits.includes(t);\n    }\n    add(t) {\n        this.isInited(t) || this.inits.push(t);\n    }\n}\nconst li = new ec();\nlet Dt;\nconst ic = (i)=>Dt[i.NAME] || null, sc = (i, t)=>{\n    if (!i || !t.allowReinits && li.isInited(i.NAME)) return;\n    li.add(i.NAME);\n    const e = ic(i), s = (e == null ? void 0 : e.isToggler) || !1;\n    if (tc(i), e != null && e.advanced) {\n        e == null || e.advanced(i, e == null ? void 0 : e.selector);\n        return;\n    }\n    if (s) {\n        e == null || e.callback(i, e == null ? void 0 : e.selector);\n        return;\n    }\n    h.find(e == null ? void 0 : e.selector).forEach((n)=>{\n        let r = i.getInstance(n);\n        r || (r = new i(n), e != null && e.onInit && r[e.onInit]());\n    });\n}, nc = {\n    allowReinits: !1,\n    checkOtherImports: !1\n};\nclass rc {\n    constructor(t){\n        Ne(this, \"init\", (t, e)=>{\n            t.forEach((s)=>sc(s, e));\n        });\n        Ne(this, \"initTWE\", (t, e)=>{\n            const s = {\n                ...nc,\n                ...e\n            }, n = Object.keys(Dt).map((r)=>{\n                if (!!document.querySelector(Dt[r].selector)) {\n                    const a = t[Dt[r].name];\n                    return !a && !li.isInited(r) && s.checkOtherImports && console.warn(`Please import ${Dt[r].name} from \"tw-elements\" package and add it to a object parameter inside \"initTWE\" function`), a;\n                }\n            });\n            this.init(n, s);\n        });\n        Dt = t;\n    }\n}\nconst oc = new rc(Jl), lc = oc.initTWE;\n //# sourceMappingURL=tw-elements.es.min.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/tw-elements/js/tw-elements.es.min.js\n");

/***/ })

};
;